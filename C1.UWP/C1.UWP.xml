<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.UWP</name>
    </assembly>
    <members>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TreeViewItem">
            <summary>
            Implements a selectable item in a C1TreeView control.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnCreateAutomationPeer">
            <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
            <returns>An AutomationPeer object used for testing the control.</returns>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.TreeView">
            <summary>
            Identifies the parent <see cref="T:C1.Silverlight.C1TreeView" /> of this item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.ParentItem">
            <summary>
            Gets the <see cref="T:C1.Xaml.C1TreeViewItem"/> that is the parent of this item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.Parent">
            <summary>
            Gets the <see cref="T:C1.Xaml.C1TreeViewItem"/> that is the parent of this item.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.IsExpandedChanged">
            <summary> 
            Event raised when the <see cref="P:IsExpanded"/> property has changed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.Expanding">
            <summary>
            Occurs before the <see cref="T:C1.Xaml.C1TreeViewItem"/> is expanded. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.Expanded">
            <summary>
            Occurs after the <see cref="T:C1.Xaml.C1TreeViewItem"/> is expanded. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.Collapsing">
            <summary>
            Occurs before the <see cref="T:C1.Xaml.C1TreeViewItem"/> is collapsed. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.Collapsed">
            <summary>
            Occurs after the <see cref="T:C1.Xaml.C1TreeViewItem"/> is collapsed. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewItem.Click">
            <summary>
            Occurs when the <see cref="T:C1.Xaml.C1TreeViewItem"/> is clicked. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnExpanding(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Expanding" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnExpanded(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Expanded" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnCollapsing(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsing" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnCollapsed(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsed" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeViewItem.Click" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnItemCleared(C1.Xaml.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnItemPrepared(C1.Xaml.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.SetCustomDefaultValues">
            <summary> 
            Initializes a new instance of the <see cref="T:C1.Xaml.C1TreeViewItem"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnHeaderChanged(System.Object)">
            <summary>
            Called when the value of the <see cref="P:Header"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>The size of the control, up to the maximum specified by constraint.</returns>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnExpandButtonClick">
            <summary>
            Called when the user clicks the expand/collapse button.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.HeaderContainer_PointerExited(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called when the the pointer exit the item.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.HeaderContainer_PointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called when the pointer over the item.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.HeaderContainer_PointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called when the pointer press the item.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.HeaderContainer_PointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called when release the mouse pointer.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnTapped(System.Object,C1.Xaml.C1TappedEventArgs)">
            <summary>
            Called when the user presses the left mouse button over the item. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Called when the user presses a key, performs keyboard auto-search and node navigation.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnExpandButtonTapped(System.Object,C1.Xaml.C1TappedEventArgs)">
            <summary>
            Called when the user presses the expand button. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnItemsChanged(System.Object)">
            <summary>
            Called when the Items property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.EnsureVisible">
            <summary>
            Scrolls the <see cref="T:C1.Silverlight.C1TreeViewItem" /> into view.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.Collapse">
            <summary>
            Collapses the <see cref="T:C1.Silverlight.C1TreeViewItem" />.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.Expand">
            <summary>
            Expands the <see cref="T:C1.Silverlight.C1TreeViewItem" />.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.Index">
            <summary>
            Gets the index of this <see cref="T:C1.Silverlight.C1TreeViewItem" /> in its parent items collection
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.NextNode">
            <summary>
            Gets the next node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.NextVisibleNode">
            <summary>
            Gets the next visible node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.PrevNode">
            <summary>
            Gets the previous node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.PrevVisibleNode">
            <summary>
            Gets the previous visible node to this one on the <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.FirstNode">
            <summary>
            Gets this node's first child.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.LastNode">
            <summary>
            Gets this node's last child.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.ChangeVisualStateShowLines(System.Boolean)">
            <summary>
            Updates the current visual state of the ShowLines visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.ChangeVisualStateItemLine(System.Boolean)">
            <summary>
            Updates the current visual state of the ItemLine visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.ChangeVisualStateExpandedStates(System.Boolean)">
            <summary>
            Updates the current visual state of the ExpandedStates visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.ChangeVisualStateSelection(System.Boolean)">
            <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.TextWrapping">
            <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.TextWrapping"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.IsSelected">
            <summary>
            Gets or sets whether a <see cref="T:C1.Silverlight.C1TreeViewItem" /> control is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.IsSelectedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.IsSelected"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value that indicates whether a <see cref="T:C1.Silverlight.C1TreeViewItem" /> is expanded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.IsExpandedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.IsExpanded"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.EditTemplate">
            <summary>
            Gets or sets the template used to edit  the contents of the items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.EditTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.EditTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.LineThickness">
            <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.LineThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.LineThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.LineStroke">
            <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.LineStrokeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.LineStroke"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.LineDashArray">
            <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.LineDashArrayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.LineDashArray"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewItem.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewItem.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewItem.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TreeViewItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TreeViewItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TreeView">
            <summary>
            Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnCreateAutomationPeer">
            <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
            <returns>An AutomationPeer object used for testing the control.</returns>
        </member>
        <member name="P:C1.Xaml.C1TreeView.DragDropArrowMarker">
            <summary>
            Gets the arrow element used to indicate the drop location.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.DragDropLineMarker">
            <summary>
            Gets the line element used to indicate the drop location.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeView.DragStart">
            <summary>
            Fires when a drag drop process starts.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.onDragStart(System.Object,C1.Xaml.C1DragStartedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragStart" /> event.
            </summary>
            <param name="source">Used to set the source of the event.</param>
            <param name="e">
            <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.DragOver">
            <summary>
            Fires during a drag drop process, when the cursor moves over a registered drop target.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnDragOver(System.Object,C1.Xaml.C1DragDeltaEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragOver" /> event.
            </summary>
            <param name="source">Used to set the source of the event.</param>
            <param name="e">
            <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.DragDrop">
            <summary>
            Fires at the end of a drag drop process, when the user releases the mouse button over a registered drop target.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnDragDrop(System.Object,C1.Xaml.C1DragCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.DragDrop" /> event.
            </summary>
            <param name="source">Used to set the source of the event.</param>
            <param name="e">
            <see cref="T:C1.Silverlight.DragDropEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.SelectionChanged">
            <summary>
            Occurs when the current selection changes.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeView.SelectionChanging">
            <summary>
             Occurs when the current selection begin to change.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeView.ItemClick">
            <summary>
            Occurs when a C1TreeViewItem is clicked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnItemClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemClick" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.ItemExpanding">
            <summary>
            Occurs when a C1TreeViewItem is expanding.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnItemExpanding(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemExpanding" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.ItemExpanded">
            <summary>
            Occurs when a C1TreeViewItem is expanded.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnItemExpanded(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemExpanded" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.ItemCollapsing">
            <summary>
            Occurs when a C1TreeViewItem is collapsing.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnItemCollapsing(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsing" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.ItemCollapsed">
            <summary>
            Occurs when a C1TreeViewItem is collapsed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnItemCollapsed(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsed" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1TreeView.AutoSearchBufferChanged">
            <summary>
            Occurs when search text is changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnAutoSearchBufferChanged(C1.Xaml.AutoSearchBufferChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1TreeView.AutoSearchBufferChanged"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TreeView.StartEditing">
            <summary>
            make the selected item enter into editing status
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.StartEditing(C1.Xaml.C1TreeViewItem)">
            <summary>
            make the item enter into editing status
            </summary>
            <param name="item">represents the item to be edited</param>
        </member>
        <member name="M:C1.Xaml.C1TreeView.FinishEditing">
            <summary>
            make the editing item quit editing status
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.FinishEditing(System.Boolean,System.Boolean)">
            <summary>
            make the editing item quit editing status
            </summary>
            <param name="cancel">determines the editing value will be cancelled or not</param>
            <param name="focusElement">determines the editing item will be focused or not after editing</param>
        </member>
        <member name="M:C1.Xaml.C1TreeView.FindItem(System.String)">
            <summary>
            Returns the first item that matches exactly with the text used as search parameter
            </summary>
            <param name="text">The text to search for</param>
            <returns>The item that matched the search parameter, null otherwise</returns>
        </member>
        <member name="M:C1.Xaml.C1TreeView.GetNode(Windows.Foundation.Point)">
            <summary>
            Gets the nearest C1TreeViewItem to the specified location.
            </summary>
            <param name="position">The location.</param>
            <returns>The nearest C1TreeViewItem.</returns>
        </member>
        <member name="M:C1.Xaml.C1TreeView.IsOutOfViewPort(Windows.Foundation.Point)">
            <summary>
             Verify the mouse pointer is whether out of viewport of ScrollViewer.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView._sbScroll_Completed(System.Object,System.Object)">
            <summary>
            Keep scrolling even if the mouse doesn't move.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.FindItem(System.Collections.Generic.List{System.Int32})">
            <summary>
            Found the item by using the collection of indexes.
            </summary>
            <param name="indexes"></param>
        </member>
        <member name="M:C1.Xaml.C1TreeView.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.AutoSearchResetDelay">
            <summary>
            Gets or Sets a value for the delay (in milliseconds) used in the keyboard search.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.AutoSearchResetDelayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.AutoSearchResetDelay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.SelectedItem">
            <summary>
            Gets the selected item in a <see cref="T:C1.Silverlight.C1TreeView" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.SelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.AllowDragDrop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Silverlight.C1TreeView" /> allows drag-and-drop operations.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.AllowDragDropProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.AllowDragDrop"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.AutoSearch">
            <summary>
            Enables or disables the AutoSearch functionality of the C1TreeView.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.AutoSearchProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.AutoSearch"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.KeyboardNavigation">
            <summary>
            Enables or disables the Keyboard navigation functionality of the C1TreeView.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.KeyboardNavigationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.KeyboardNavigation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.SelectionMode">
            <summary>
            Gets or sets the selection behavior for a C1TreeView.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.SelectionMode"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeView.SelectionModeChanged">
            <summary> 
            Event raised when the <see cref="P:SelectionMode"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.SelectedItems">
            <summary>
            Gets the selected items in a <see cref="T:C1.Xaml.C1TreeView" /> (when in Multiple Selection mode).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.SelectedItems"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.ExpandOnClick">
            <summary>
            Gets or sets a value indicating whether the node is expanded/collapsed when the users clicks in the C1TreeViewItem header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.ExpandOnClickProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.ExpandOnClick"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.ExpandMode">
            <summary>
            Gets or sets a value indicating the allowed number of expanded C1TreeViewItems.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.ExpandModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.ExpandMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.ScrollBarStyle">
            <summary>
            Gets or sets the style used for the inner scrollbar.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.ScrollBarStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.ScrollBarStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.AutoScrollMode">
            <summary>
            Gets or sets a value indicating the auto-scroll mode used by the C1TreeView when navigating to C1treeViewItems that are not (or don´t fit) in the current ViewPort.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.AutoScrollModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.AutoScrollMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.EditTemplate">
            <summary>
            Gets or sets the template used to edit  the contents of the items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.EditTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.EditTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.LineThickness">
            <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.LineThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.LineThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.LineStroke">
            <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.LineStrokeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.LineStroke"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.ShowLines">
            <summary>
            Gets or sets a value that indicates whether the connecting lines are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.ShowLinesProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.ShowLines"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.LineDashArray">
            <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.LineDashArrayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.LineDashArray"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Xaml.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeView.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeView.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeView.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TreeView"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeView.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TreeView"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1CollectionView">
            <summary>
            Represents the ICollectionView interface implementation with support for live sorting, filtering and grouping.
            Replicates the API of the WPF CollectionView class.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Xaml.C1CollectionView"/> component.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of <see cref="T:C1.Xaml.C1CollectionView"/> component.
            </summary>
            <param name="source">
            The underlying data source.
            </param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.GetEnumerator">
            <summary>
            Gets the view items enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.Count">
            <summary>
            Gets the number of items in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsReadOnly">
            <summary>
            Gets a value indicating whether the view is read-only.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Add(System.Object)">
            <summary>
            Adds an item to the underlying collection.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Clear">
            <summary>
            Removes all items from the underlying collection.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Contains(System.Object)">
            <summary>
            Gets a value indicating whether the specified item belongs to the view. This method returns false if item belongs
            to the underlying collection but filtered out by the view due to specified <see cref="P:C1.Xaml.C1CollectionView.Filter"/>.
            </summary>
            <param name="item">
            The item to search for.
            </param>
            <returns>
            true is item is exposed by the view; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the items of the view to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array to copy items to.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific item from the underlying collection.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <returns>
            true if item was removed from the collection; otherwise,false.
            </returns>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified view index.
            </summary>
            <param name="index">
             The zero-based index of the item in the view.
            </param>
            <returns>
            The item at the specified view index.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.IndexOf(System.Object)">
            <summary>
            Returns the index at which the specified item is located in the view.
            </summary>
            <param name="item">
            The item to locate.
            </param>
            <returns>
            The index at which the specified item is located, or –1 if the item is unknown.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the underlying collection at the specified index. If view is sorted or filtered,
            the item is added to the end of the underlying collection.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted. This parameter is ignored if view is sorted or filtered.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified view index from the underlying collection.
            </summary>
            <param name="index">
            The zero-based index of the removing item in the view.
            </param>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CollectionGroups">
            <summary>
            Gets a collection of the top-level groups that is constructed based in 
            the <see cref="P:C1.Xaml.C1CollectionView.GroupDescriptions"/> property. The objects in the collection are instances of the
            <see cref="T:C1.Xaml.CollectionViewGroup"/> class that implements
            the <see cref="T:Windows.UI.Xaml.Data.ICollectionViewGroup"/> interface.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1CollectionView.CurrentChanged">
            <summary>
            The event is triggered after the current item has been changed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1CollectionView.CurrentChanging">
            <summary>
            The event is triggered before the current item is changing, and allows to cancel the move to another item.  
            </summary>
        </member>
        <member name="E:C1.Xaml.C1CollectionView.VectorChanged">
            <summary>
            Occurs after the view item set has changed, due to applied transformations or changes happened in the underlying
            collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CurrentPosition">
            <summary>
            Gets the index of the current item in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsCurrentAfterLast">
            <summary>
            Gets a value that indicates whether the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> of the view is beyond the end of the collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsCurrentBeforeFirst">
            <summary>
            Gets a value that indicates whether the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> of the view is beyond the beginning of the collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.HasMoreItems">
            <summary>
            Returns true if additional unloaded items remain in the view; otherwise, false.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.LoadMoreItemsAsync(System.UInt32)">
            <summary>
            Initializes incremental loading from the view.
            </summary>
            <param name="count">The number of items to load.</param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentTo(System.Object)">
            <summary>
            Sets the specified item to be the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> in the view.
            </summary>
            <param name="item">
            The item to set as the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>.
            </param>
            <returns>
            True if the specified item became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentToFirst">
            <summary>
            Sets the first item in the view as the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>.
            </summary>
            <returns>
            True if the first item became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentToLast">
            <summary>
            Sets the last item in the view as the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>.
            </summary>
            <returns>
            True if the last item became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentToNext">
            <summary>
            Sets the item after the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> in the view as the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>.
            </summary>
            <returns>
            True if the next item became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Sets the item at the specified view index to be the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> in the view.
            </summary>
            <param name="index"></param>
            <returns>
            True if the item at the specified index became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.MoveCurrentToPrevious">
            <summary>
            Sets the item before the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/> in the view as the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>.
            </summary>
            <returns>
            True if the previous item became the <see cref="P:C1.Xaml.C1CollectionView.CurrentItem"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanGroup">
            <summary>
            Gets a value that indicates whether the view supports grouping.
            </summary>
            <remarks>
            This property always returns true.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanSort">
            <summary>
            Gets a value that indicates whether the view supports local sorting.
            </summary>
            <remarks>
            This property always returns true.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.SourceCollection">
            <summary>
            Gets or sets the underlying collection which this <see cref="T:C1.Xaml.C1CollectionView"/> represents.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.GroupDescriptions">
            <summary>
            Gets a collection of <see cref="T:C1.Xaml.GroupDescription"/> derived objects that describes how the items in the 
            collection are grouped in the view. Usually objects of the <see cref="T:C1.Xaml.PropertyGroupDescription"/> class
            are used to specify grouping conditions.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.SortDescriptions">
            <summary>
            Gets a collection of <see cref="T:C1.Xaml.SortDescription"/> objects that describe
            how the items in the collection are sorted in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanFilter">
            <summary>
            Gets a value that indicates whether this view supports filtering via the
            <see cref="P:C1.Xaml.C1CollectionView.Filter"/> property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.Filter">
            <summary>
            Gets or sets a callback used to determine if an item is suitable for inclusion
            in the view.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.DeferRefresh">
            <summary>
            Enters a defer cycle that you can use to merge changes to the view and delay
            automatic refresh.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.Refresh">
            <summary>
            Causes the view item set refresh.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether a new item can be added to the underlying collection using the <see cref="M:C1.Xaml.C1CollectionView.AddNew"/> 
            method.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanRemove">
            <summary>
            Gets a value indicating whether an item can be removed from the underlying collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an add transaction started by the <see cref="M:C1.Xaml.C1CollectionView.AddNew"/> method is in progress.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CurrentAddItem">
            <summary>
            Gets the item that is being added during the current add transaction started by the <see cref="M:C1.Xaml.C1CollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.AddNew">
            <summary>
            Starts the transaction of adding a new item to the underlying collection, which should be committed with the
            <see cref="M:C1.Xaml.C1CollectionView.CommitNew"/> method or rolled back with the <see cref="M:C1.Xaml.C1CollectionView.CancelNew"/> method.
            </summary>
            <returns>
            The added item.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CancelNew">
            <summary>
            Rolls back the current add transaction started by the <see cref="M:C1.Xaml.C1CollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CommitNew">
            <summary>
            Commits the current add transaction started by the <see cref="M:C1.Xaml.C1CollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.EditItem(System.Object)">
            <summary>
            Begins an edit transaction on the specified item.
            </summary>
            <param name="item">
            The item to edit.
            </param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CommitEdit">
            <summary>
            Commits the current edit transaction started by the <see cref="M:C1.Xaml.C1CollectionView.EditItem(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CancelEdit">
            <summary>
            Rolls back the current edit transaction started by the <see cref="M:C1.Xaml.C1CollectionView.EditItem(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view can roll back the current edit transaction started by 
            the <see cref="M:C1.Xaml.C1CollectionView.EditItem(System.Object)"/> method and restore original values of an editing item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an edit transaction started by the <see cref="M:C1.Xaml.C1CollectionView.EditItem(System.Object)"/> method is in progress.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CurrentEditItem">
            <summary>
            Gets the item that is being edited during the current edit transaction started by the <see cref="M:C1.Xaml.C1CollectionView.EditItem(System.Object)"/> method. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1CollectionView.PropertyChanged">
            <summary>
            This event occurs when a property value has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.Culture">
            <summary>
            Gets or sets the culture information to use during sorting.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.PassesFilter(System.Object)">
            <summary>
            Returns a value indicating whether the specified item satisfies the filter conditions defined in the 
            <see cref="P:C1.Xaml.C1CollectionView.Filter"/> property.
            </summary>
            <param name="item">
            The item to check.
            </param>
            <returns>
            True if filter is not specified or item satisfies the filter conditions; otherwise, false.
            </returns>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.CustomSort">
            <summary>
            Gets or sets a custom object that implements IComparer to sort items in the view, as
            an alternative to sort conditions represented by the <see cref="!:ViewSortDescriptions"/>
            property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.ActualSourceList">
            <summary>
            An effective source list, either a source collection itself or its copy.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.ExposedList">
            <summary>
            Actual list of items exposed by the view. It references either ExposedCache (in case of sorting or filtering) or 
            ActualSourceList (in the other case).
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.ExposedCache">
            <summary>
            Cache of exposed items, in case when there is a local sorting or filtering;
            otherwise, a null value.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.NeedsRowsetTransformation">
            <summary>
            Indicates whether source rowset must be transformed due to filtering or sorting.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsReordered">
            <summary>
            Indicates whether exposed rowset has item order different from the source one.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.CreateList(System.Collections.IEnumerable)">
            <summary>
            Creates IList containing a copy of the <paramref name="source"/> IEnumerable.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.GetTransformedList(System.Collections.IList)">
            <summary>
            Returns a sorted and filtered <paramref name="sourceList"/>.
            </summary>
            <param name="sourceList"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.PerformGrouping">
            <summary>
            Creates Groups based on _exposedList.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.HasLocalFilter">
            <summary>
            Indicates whether there is a local filter condition.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.HasLocalSort">
            <summary>
            Indicates whether there is a local sort condition.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsGrouping">
            <summary>
            Indicates whether the view is in the grouping mode.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.IsGroupingAvailable">
            <summary>
            Indicates whether the view is in the grouping mode and group data is already ready to use.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionView.ActualComparer">
            <summary>
            Gets an actually used comparer, either assigned to <see cref="P:C1.Xaml.C1CollectionView.CustomSort"/> or
            based on <see cref="P:C1.Xaml.C1CollectionView.SortDescriptions"/>, or a null value. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.AddExposedItem(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Adds the item to ExposedList taking into account possible sorting conditions, and
            returns an index of the item in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.RemoveExposedItem(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Removes the item from the ExposedList and returns an index of the removed item, or -1
            if item was not found in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.AddToGroupTree(System.Object,System.Int32)">
            <summary>
            Adds the item into group tree and returns its index.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.RemoveFromGroupTree(System.Object)">
            <summary>
            Removes the item from the group tree and returns an index of the removed item, or -1
            if item was not found in the tree.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.UpdateCurrentAfterAddition(System.Object,System.Int32)">
            <summary>
            Updates CurrentItem and CurrentPosition after an addition of the specified
            item at the specified index.
            </summary>
            <param name="addedItem"></param>
            <param name="index"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.UpdateCurrentAfterRemoval(System.Int32)">
            <summary>
            Updates CurrentItem and CurrentPosition after a removal of an item
            at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.UpdateCurrentAfterMove(System.Object,System.Int32,System.Int32)">
            <summary>
            Updates CurrentItem and CurrentPosition after a move of the item from and to
            specified indexes.
            </summary>
            <param name="movedItem"></param>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.GetIndexInFilteredList(System.Collections.IList,System.Collections.IList,System.Int32,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Finds an index of an item in the filtered list for an item with the specified 
            index in the base non-filtered list (items in the filtered list are supposed to
            be in the same order). If the item is not included in the filtered list then
            returns a negative number, which is the bitwise complement of the index of the 
            next element that is included in the filtered list, if there is no larger element, 
            the bitwise complement of Count (roughly speaking - an index that it would have
            if it's included in the filtered list). 
            </summary>
            <param name="filteredList"></param>
            <param name="nonFilteredList"></param>
            <param name="nonFilteredIndex"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.RaiseCurrencyPropertiesChanged(C1.Xaml.ViewCurrencyState,System.Boolean)">
            <summary>
            Compares current currency related property values with their previous values
            provided in <paramref name="prevState"/> and raises PropertyChanged event for
            properties with changed values.
            </summary>
            <param name="prevState"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.InsertCore(System.Int32,System.Object)">
            <summary>
            Negative index means Add.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.GlobalToExposedIdx(System.Int32)">
            <summary>
            Returns: 
            -1 : index is above page
            -2: index is below page
            >= 0: in page index, or the index itself if not paged mode
            </summary>
            <param name="globIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1CollectionView.TransToPagedArgs(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Update _pagedTrans and returns event with indexes translated to a page, or null if index is out of page.
            </summary>
            <param name="globArgs"></param>
        </member>
        <member name="T:C1.Xaml.C1CollectionView.DeferNotifications">
            <summary>
            Class that handles deferring notifications while the view is modified.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionViewGroupBase.Level">
            <summary>
            This group level, -1 for the root group.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CollectionViewGroupBase.UseGroupsHash">
            <summary>
            The offset of the first group item index in the ExposedList from the previous group's first item index.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CollectionViewGroupBase.AddItem(System.Object,System.Boolean,System.Int32@,System.Int32)">
            <summary>
            <paramref name="index"/> is correct only if <paramref name="isInitializing"/>
            is false.
            </summary>
            <param name="item"></param>
            <param name="isInitializing"></param>
            <param name="index"></param>
            <param name="group"></param>
        </member>
        <member name="M:C1.Xaml.C1CollectionViewGroupRoot.CreateAccessInfoList">
            <summary>
            Returns null if can't create an accessor or equality comparer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ItemsInGroupTreeEnumerator.FillCurrentGroupIndexes(System.Collections.Generic.IList{System.Int32})">
            <summary>
            
            </summary>
            <param name="indexList"></param>
        </member>
        <member name="M:C1.Xaml.SuppressableReadOnlyObservableCollection`1.SuppressNotifications(System.Boolean)">
            <summary>
            <paramref name="singleNotificationMode"/> == true supposes a single notification event during suppression, and if
            this was the case then exactly those notification is raised on exit from suppression. If there were more than one
            notification, or if <paramref name="singleNotificationMode"/> is false then Reset notification is send on exit
            from a suppression.
            </summary>
            <param name="singleNotificationMode"></param>
        </member>
        <member name="T:C1.Xaml.MiscHelpers.VectorChangedEventArgs">
            <summary>
            Class that implements IVectorChangedEventArgs so we can fire VectorChanged events.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:C1.Xaml.ValueConversionUtils.ObjectEqualityComparerWrapper" -->
        <member name="T:C1.Xaml.AutomationPeerFactory">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Xaml.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type)">
            <summary>
            Creates an instance of AutomationPeer class for given C1 control.
            </summary>
            <param name="peerOwner">Owner control.</param>
            <param name="ownerType">Type of the owner control.</param>
            <returns>The automation peer object.</returns>
        </member>
        <member name="M:C1.Xaml.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type,Windows.UI.Xaml.Controls.Control)">
            <summary>
            Creates an instance of AutomationPeer class for given C1 control.
            </summary>
            <param name="peerOwner">Owner control.</param>
            <param name="ownerType">Type of the owner control.</param>
            <param name="owningSelectorControl">Reference to the owning Selector control. It's required if AutomationPeer is inherited from the SelectorItemAutomationPeer.</param>
            <returns>The automation peer object.</returns>
        </member>
        <member name="T:C1.Xaml.CollectionViewGroup">
            <summary>
            Represents a group item of the <see cref="T:C1.Xaml.C1CollectionView"/> instance in the 
            <see cref="P:C1.Xaml.C1CollectionView.CollectionGroups"/> collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.CollectionViewGroup.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group has any subgroups.
            </summary>
        </member>
        <member name="P:C1.Xaml.CollectionViewGroup.ItemCount">
            <summary>
            Gets a number of the source collection items inside the group subtree.
            </summary>
        </member>
        <member name="P:C1.Xaml.CollectionViewGroup.GroupItems">
            <summary>
            Gets a collection of child items of the group, which can be a source collection items for a bottom level group
            or <see cref="T:C1.Xaml.CollectionViewGroup"/> objects for groups in higher level of the groups tree hierarchy.
            </summary>
        </member>
        <member name="P:C1.Xaml.CollectionViewGroup.Group">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="T:C1.Xaml.GroupDescription">
            <summary>
            Represents a base class for types defining grouping conditions in the 
            <see cref="P:C1.Xaml.C1CollectionView.GroupDescriptions"/> collection of the <see cref="T:C1.Xaml.C1CollectionView"/> 
            class. The real class which is usually used for this purpose is <see cref="T:C1.Xaml.PropertyGroupDescription"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Returns the group name for the given item.
            </summary>
            <param name="item">
            The item to get group name for.
            </param>
            <param name="level">
            The zero-based group level index.
            </param>
            <param name="culture">
            The culture.
            </param>
            <returns>
            The name of the group the item belongs to.
            </returns>
        </member>
        <member name="M:C1.Xaml.GroupDescription.NamesMatch(System.Object,System.Object)">
            <summary>
            Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.
            </summary>
            <param name="groupName">
            The name of the group.
            </param>
            <param name="itemName">
            The name of the item.
            </param>
            <returns>
            true if the names match; otherwise, false. 
            </returns>
        </member>
        <member name="P:C1.Xaml.GroupDescription.GroupNames">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Xaml.PropertyGroupDescription">
            <summary>
            Describes the grouping of items using a property name as the criteria.
            </summary>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Xaml.PropertyGroupDescription"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Xaml.PropertyGroupDescription"/> class with the specified item property name.
            </summary>
            <param name="propertyName">
            The name of the item property to group on.
            </param>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.#ctor(System.String,Windows.UI.Xaml.Data.IValueConverter)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Xaml.PropertyGroupDescription"/> class with the specified item property name
            and converter that produces a final group name value.
            </summary>
            <param name="propertyName">
            The name of the item property to group on.
            </param>
            <param name="converter">
            The converter that applies to the property value and produces a final group name value.
            </param>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.#ctor(System.String,Windows.UI.Xaml.Data.IValueConverter,System.StringComparison)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Xaml.PropertyGroupDescription"/> class with the specified item property name,
            converter that produces a final group name value and string comparison used to match the property value and a 
            group name.
            </summary>
            <param name="propertyName">
            The name of the item property to group on.
            </param>
            <param name="converter">
            The converter that applies to the property value and produces a final group name value.
            </param>
            <param name="stringComparison">
            StringComparison used to match the property value and a group name.
            </param>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Returns the group name for the given item.
            </summary>
            <param name="item">
            The item to get group name for.
            </param>
            <param name="level">
            The zero-based group level index.
            </param>
            <param name="culture">
            The culture.
            </param>
            <returns>
            The name of the group the item belongs to.
            </returns>
        </member>
        <member name="M:C1.Xaml.PropertyGroupDescription.NamesMatch(System.Object,System.Object)">
            <summary>
            Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.
            </summary>
            <param name="groupName">
            The name of the group.
            </param>
            <param name="itemName">
            The name of the item.
            </param>
            <returns>
            true if the names match; otherwise, false. 
            </returns>
        </member>
        <member name="P:C1.Xaml.PropertyGroupDescription.Converter">
            <summary>
            Gets or sets a converter that applies to the property value and produces a final group name value.
            </summary>
        </member>
        <member name="P:C1.Xaml.PropertyGroupDescription.PropertyName">
            <summary>
            Gets or sets the name of the item property to group on.
            </summary>
        </member>
        <member name="P:C1.Xaml.PropertyGroupDescription.StringComparison">
            <summary>
            Gets or sets StringComparison used to match the property value and a group name.
            </summary>
        </member>
        <member name="T:C1.Xaml.IC1CollectionView">
            <summary>
            Extends the WinRT ICollectionView interface to provide sorting and filtering. This interface adds the members 
            defined in WPF and Silverlight versions of ICollectionView but absent in WinRT.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.CanFilter">
            <summary>
            Gets a value that indicates whether this view supports filtering via the
            <see cref="P:C1.Xaml.IC1CollectionView.Filter"/> property.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.Filter">
            <summary>
            Gets or sets a callback used to determine if an item is suitable for inclusion
            in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.CanSort">
            <summary>
            Gets a value that indicates whether this view supports sorting via the 
            <see cref="P:C1.Xaml.IC1CollectionView.SortDescriptions"/> property.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.SortDescriptions">
            <summary>
            Gets a collection of SortDescription objects that describe
            how the items in the collection are sorted in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.CanGroup">
            <summary>
            Gets a value that indicates whether this view supports grouping via the 
            <see cref="P:C1.Xaml.IC1CollectionView.GroupDescriptions"/> property.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.GroupDescriptions">
            <summary>
            Gets a collection of System.ComponentModel.GroupDescription objects that
            describe how the items in the collection are grouped in the view.
            </summary>
        </member>
        <member name="P:C1.Xaml.IC1CollectionView.SourceCollection">
            <summary>
            Get the underlying collection.
            </summary>
        </member>
        <member name="M:C1.Xaml.IC1CollectionView.DeferRefresh">
            <summary>
            Enters a defer cycle that you can use to merge changes to the view and delay
            automatic refresh.
            </summary>
        </member>
        <member name="M:C1.Xaml.IC1CollectionView.Refresh">
            <summary>
            Refreshes the view applying the current sort and filter conditions.
            </summary>
        </member>
        <member name="T:C1.Xaml.SortDescription">
            <summary>
            Defines the direction and the property name to be used as the criteria for sorting a collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.SortDescription.PropertyName">
            <summary>
            Gets or sets the property name being used as the sorting criteria.
            </summary>
        </member>
        <member name="P:C1.Xaml.SortDescription.Direction">
            <summary>
            Gets or sets a value that indicates whether to sort in ascending or descending order.
            </summary>
        </member>
        <member name="T:C1.Xaml.ListSortDirection">
            <summary>
            Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:C1.Xaml.ListSortDirection.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:C1.Xaml.ListSortDirection.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:C1.Xaml.SortDescriptionCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Xaml.SortDescription"/> objects.
            </summary>
        </member>
        <member name="T:C1.Xaml.IEditableCollectionView">
            <summary>
            Implements a WinRT version of the IEditableCollectionView interface present in WPF and Silverlight.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether a new item can be added to the underlying collection using the <see cref="M:C1.Xaml.IEditableCollectionView.AddNew"/> 
            method.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether an item can be removed from the underlying collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an add transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.AddNew"/> method is in progress.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.CurrentAddItem">
            <summary>
            Gets the item that is being added during the current add transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.AddNew">
            <summary>
            Starts the transaction of adding a new item to the underlying collection, which should be committed with the
            <see cref="M:C1.Xaml.IEditableCollectionView.CommitNew"/> method or rolled back with the <see cref="M:C1.Xaml.IEditableCollectionView.CancelNew"/> method.
            </summary>
            <returns>
            The added item.
            </returns>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.CancelNew">
            <summary>
            Rolls back the current add transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.CommitNew">
            <summary>
            Commits the current add transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.AddNew"/> method.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view can roll back the current edit transaction started by 
            the <see cref="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)"/> method and restore original values of an editing item.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an edit transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)"/> method is in progress.
            </summary>
        </member>
        <member name="P:C1.Xaml.IEditableCollectionView.CurrentEditItem">
            <summary>
            Gets the item that is being edited during the current edit transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)"/> method. 
            </summary>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)">
            <summary>
            Begins an edit transaction on the specified item.
            </summary>
            <param name="item">
            The item to edit.
            </param>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.CancelEdit">
            <summary>
            Rolls back the current edit transaction started by the <see cref="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.IEditableCollectionView.CommitEdit">
            <summary>
            Gets a value indicating whether the view can roll back the current edit transaction started by 
            the <see cref="M:C1.Xaml.IEditableCollectionView.EditItem(System.Object)"/> method and restore original values of an editing item.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1BrushBuilder">
            <summary>
            Builds a Brush from an Input color a Design brush and a color base extrapolating the design brush.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1BrushBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1BrushBuilder"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1BrushBuilder.DesignBrush">
            <summary>
            Gets or sets the design brush.
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
            <value>The design brush.</value>
        </member>
        <member name="F:C1.Xaml.C1BrushBuilder.DesignBrushProperty">
            <summary>
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1BrushBuilder.DesignColor">
            <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
            <value>The color of the design.</value>
        </member>
        <member name="F:C1.Xaml.C1BrushBuilder.DesignColorProperty">
            <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1BrushBuilder.Input">
            <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
            <value>The input.</value>
        </member>
        <member name="F:C1.Xaml.C1BrushBuilder.InputProperty">
            <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1BrushBuilder.ExtrapolationMethod">
            <summary>
            Gets or sets the extrapolation method.
            </summary>
            <value>The extrapolation method.</value>
        </member>
        <member name="P:C1.Xaml.C1BrushBuilder.Output">
            <summary>
            Gets the resulting brush of the extrapolation the design brush to the input color.
            </summary>
            <value>The output.</value>
        </member>
        <member name="E:C1.Xaml.C1BrushBuilder.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Xaml.BrushBuilderExtrapolationMethod">
            <summary>
            Determines how the extrapolation of colors will be made.
            </summary>
        </member>
        <member name="F:C1.Xaml.BrushBuilderExtrapolationMethod.Absolute">
            <summary>
            The extrapolation will be done adding and subtracting the absolute difference of saturation and luminance. 
            </summary>
        </member>
        <member name="T:C1.Xaml.C1CircularGradientBrushBuilder">
            <summary>
            Builds a circular gradient brush from 2 gradient colors.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CircularGradientBrushBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1CircularGradientBrushBuilder"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CircularGradientBrushBuilder.Output">
            <summary>
            Gets the resulting circular gradient brush.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1CircularGradientBrushBuilder.OutputProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1CircularGradientBrushBuilder.Output"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CircularGradientBrushBuilder.Color1">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Color"/> structure used as the first gradient color.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1CircularGradientBrushBuilder.Color1Property">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1CircularGradientBrushBuilder.Color1"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CircularGradientBrushBuilder.Color2">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Color"/> structure used as the second gradient color.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1CircularGradientBrushBuilder.Color2Property">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1CircularGradientBrushBuilder.Color2"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1CircularGradientBrushBuilder.Angle">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> values specifying brush rotation angle.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1CircularGradientBrushBuilder.AngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1CircularGradientBrushBuilder.Angle"/> dependency property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1CircularGradientBrushBuilder.OutputChanged">
            <summary>
            Event is fired when output brush is changed.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1HslColor">
            <summary>
            Class that allows to increase/decrease lightness
            of the specified color.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HslColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1HslColor"/> struct.
            </summary>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.Xaml.C1HslColor.#ctor(System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1HslColor"/> struct.
            </summary>
            <param name="a">Alpha channel.</param>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.Xaml.C1HslColor.#ctor(Windows.UI.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1HslColor"/> struct.
            </summary>
            <param name="rgbColor">RGB color used to initialize the HSL color.</param>
        </member>
        <member name="P:C1.Xaml.C1HslColor.Hue">
            <summary>
            Gets or sets the hue of the color.
            </summary>
            <remarks>
            Hue is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1HslColor.Saturation">
            <summary>
            Gets or sets the saturation of the color.
            </summary>
            <remarks>
            Saturation is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1HslColor.Luminance">
            <summary>
            Gets or sets the luminance of the color.
            </summary>
            <remarks>
            Luminance is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1HslColor.Alpha">
            <summary>
            Gets or sets the alpha channel of the color.
            </summary>
        </member>
        <member name="T:C1.Xaml.ClearStyleExtensions">
            <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.MouseOverBrushProperty">
            <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetMouseOverBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetMouseOverBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the mouse over state.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.PressedBrushProperty">
            <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetPressedBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetPressedBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the pressed state.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.FocusBrushProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetFocusBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetFocusBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the focus state.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.ButtonBackgroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetButtonBackground(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetButtonBackground(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the background of clear style button.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.ButtonForegroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetButtonForeground(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetButtonForeground(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the foreground of clear style button.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.ButtonCornerRadiusProperty">
            <summary>
            This attached property can modify the corner radius of the buttons of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetButtonCornerRadius(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetButtonCornerRadius(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Sets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.CaretBrushProperty">
            <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetCaretBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetCaretBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the caret state.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.CornerRadiusProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetCornerRadius(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetCornerRadius(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Sets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.Xaml.ClearStyleExtensions.ScrollBarStyleProperty">
            <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.GetScrollBarStyle(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ClearStyleExtensions.SetScrollBarStyle(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Style)">
            <summary>
            Sets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The style used in scrollbars.</param>
        </member>
        <member name="T:C1.Xaml.ColorConverter">
            <summary>
            Converts between Colors and Brushes.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1Command">
            <summary>
            Defines a command that implements ICommand and is routed through the element tree.
            Limitation:
            when converting from string, doesn't honor xaml namespaces.
            If you have several classes with the same name in different namespaces, don't set command in xaml as string,
            use binding syntax instead.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Command.CanExecuteChanged">
            <summary>
            Occurs when changes to the command source are detected by the command manager. 
            These changes often affect whether the command should execute on the current command target.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Command.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1Command"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Command.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1Command"/> class with the specified name and owner type.
            </summary>
            <param name="name">Declared name for serialization.</param>
            <param name="ownerType">The type which is registering the command.</param>
        </member>
        <member name="P:C1.Xaml.C1Command.Name">
            <summary>
            Gets the name of the command. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Command.OwnerType">
            <summary>
            Gets the type that is registered with the command.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Command.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1Command.CanExecute(System.Object,Windows.UI.Xaml.UIElement)">
            <summary>
            Determines whether this <see cref="T:C1.Xaml.C1Command"/> can execute in its current state.
            </summary>
            <param name="parameter">A user defined data type.</param>
            <param name="target">The command target.</param>
            <returns>True if the command can execute on the current command target; otherwise, False.</returns>
        </member>
        <member name="M:C1.Xaml.C1Command.Execute(System.Object,Windows.UI.Xaml.UIElement)">
            <summary>
            Executes the <see cref="T:C1.Xaml.C1Command"/> on the current command target.
            </summary>
            <param name="parameter">User defined parameter to be passed to the handler.</param>
            <param name="target">Element at which to being looking for command handlers.</param>
        </member>
        <member name="T:C1.Xaml.CommandConverter">
            <summary>
            Converts an <see cref="T:System.Windows.Input.ICommand"/> object to and from other types.
            </summary>
        </member>
        <member name="T:C1.Xaml.CommandBinding">
            <summary>
            Binds an <see cref="T:System.Windows.Input.ICommand"/> to the event handlers that implement the command. 
            </summary>
        </member>
        <member name="E:C1.Xaml.CommandBinding.CanExecute">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Xaml.CommandBinding"/> initiates a 
            check to determine whether the command can be executed on the command target.
            </summary>
        </member>
        <member name="E:C1.Xaml.CommandBinding.Executed">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Xaml.CommandBinding"/> executes.
            </summary>
        </member>
        <member name="E:C1.Xaml.CommandBinding.PreviewCanExecute">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Xaml.CommandBinding"/> initiates 
            a check to determine whether the command can be executed on the current command target.
            </summary>
        </member>
        <member name="E:C1.Xaml.CommandBinding.PreviewExecuted">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Xaml.CommandBinding"/> executes.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandBinding.#ctor">
            <summary>
            Initializes a new instance of the CommandBinding class.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandBinding.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:C1.Xaml.CommandBinding.#ctor(System.Windows.Input.ICommand,C1.Xaml.ExecutedRoutedEventHandler)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified 
            <see cref="T:System.Windows.Input.ICommand"/> and the specified <see cref="E:C1.Xaml.CommandBinding.Executed"/> event handler.
            </summary>
            <param name="command">The command.</param>
            <param name="executed">The handler for the <see cref="E:C1.Xaml.CommandBinding.Executed"/> event on the new command.</param>
        </member>
        <member name="M:C1.Xaml.CommandBinding.#ctor(System.Windows.Input.ICommand,C1.Xaml.ExecutedRoutedEventHandler,C1.Xaml.CanExecuteRoutedEventHandler)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified 
            <see cref="T:System.Windows.Input.ICommand"/> and the specified <see cref="E:C1.Xaml.CommandBinding.Executed"/> and 
            <see cref="E:C1.Xaml.CommandBinding.CanExecute"/> even handlers.
            </summary>
            <param name="command">The command.</param>
            <param name="executed">The handler for the <see cref="E:C1.Xaml.CommandBinding.Executed"/> event on the new command.</param>
            <param name="canExecute">The handler for the <see cref="E:C1.Xaml.CommandBinding.CanExecute"/> event on the new command.</param>
        </member>
        <member name="P:C1.Xaml.CommandBinding.Command">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.ICommand"/> associated with this <see cref="T:C1.Xaml.CommandBinding"/>. 
            </summary>
        </member>
        <member name="T:C1.Xaml.CommandExtensions">
            <summary>
            Provides attached properties emulating ICommandSource interface.
            </summary>
        </member>
        <member name="F:C1.Xaml.CommandExtensions.CommandProperty">
            <summary>
            Identifies the Command attached property.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.GetCommand(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the command that will be executed when the command source is invoked.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The <see cref="T:System.Windows.Input.ICommand"/> property value for the element.</returns>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.SetCommand(Windows.UI.Xaml.FrameworkElement,System.Object)">
            <summary>
            Sets the command that will be executed when the command source is invoked.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The needed <see cref="T:System.Windows.Input.ICommand"/> value.</param>
        </member>
        <member name="F:C1.Xaml.CommandExtensions.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter attached property.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.GetCommandParameter(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets a user defined data value that can be passed to the command when it is executed.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The command specific data.</returns>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.SetCommandParameter(Windows.UI.Xaml.FrameworkElement,System.Object)">
            <summary>
            Sets a user defined data value that can be passed to the command when it is executed.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The command specific data.</param>
        </member>
        <member name="F:C1.Xaml.CommandExtensions.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget attached property.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.GetCommandTarget(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the object that the command is being executed on.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The object that the command is being executed on.</returns>
        </member>
        <member name="M:C1.Xaml.CommandExtensions.SetCommandTarget(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the object that the command is being executed on.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The object that the command is being executed on.</param>
        </member>
        <member name="T:C1.Xaml.CommandToElementsMap">
            <summary>
            Maintains a mapping between ICommand and FrameworkElement
            objects, for the CommandExtensions class.
            </summary>
        </member>
        <member name="F:C1.Xaml.CommandToElementsMap._map">
            <summary>
            Maps ICommand objects to lists of FrameworkElement objects.  Stores the object references
            as WeakReferences, so that the commands and buttons can be garbage collected as necessary.
            </summary>
        </member>
        <member name="T:C1.Xaml.CommandManager">
            <summary>
            Provides command related utility methods that register CommandBinding objects for class 
            owners and commands, add and remove command event handlers, and provides services 
            for querying the status of a command.
            </summary>
        </member>
        <member name="E:C1.Xaml.CommandManager.RequerySuggested">
            <summary>
            Occurs when the <see cref="T:C1.Xaml.CommandManager"/> detects conditions that might change 
            the ability of a command to execute.
            </summary>
            <remarks>Contrary to WPF System.Windows.Input.CommandManger implementation, 
            <see cref="T:C1.Xaml.CommandManager"/> doesn't track layout changes. 
            So, this event might not be called at some conditions. 
            If you came across this issue, use <see cref="M:C1.Xaml.CommandManager.InvalidateRequerySuggested"/> 
            method for explicit check.</remarks>
        </member>
        <member name="M:C1.Xaml.CommandManager.InvalidateRequerySuggested">
            <summary>
            Call this method for explicit check the ability of registered commands to execute.
            </summary>
        </member>
        <member name="M:C1.Xaml.CommandManager.RegisterClassCommandBinding(System.Type,C1.Xaml.CommandBinding)">
            <summary>
            Registers a <see cref="T:C1.Xaml.CommandBinding"/> with the specified type. 
            </summary>
            <param name="type">The class with which to register commandBinding.</param>
            <param name="commandBinding">The command binding to register.</param>
        </member>
        <member name="T:C1.Xaml.C1RoutedEventArgs">
            <summary>
            The base class for <see cref="T:C1.Xaml.CanExecuteRoutedEventArgs"/> and <see cref="T:C1.Xaml.ExecutedRoutedEventArgs"/>
            classes.
            Provides some additional properties comparing to the <see cref="T:Windows.UI.Xaml.RoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RoutedEventArgs.EventName">
            <summary>
            Gets the input event name associated with this <see cref="T:C1.Xaml.CanExecuteRoutedEventArgs"/> instance.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling 
            for event as it travels the route.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RoutedEventArgs.OriginalSource">
            <summary>
            Gets the original reporting source as determined by pure hit testing. 
            </summary>
        </member>
        <member name="T:C1.Xaml.CanExecuteRoutedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Xaml.CommandBinding.CanExecute"/> event.
            </summary>
            <param name="sender">The command target that is invoking the handler.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Xaml.CanExecuteRoutedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Xaml.CommandBinding.CanExecute"/> and 
            <see cref="E:C1.Xaml.CommandBinding.PreviewCanExecute"/> routed events.
            </summary>
        </member>
        <member name="P:C1.Xaml.CanExecuteRoutedEventArgs.CanExecute">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.ICommand"/> associated with 
            this event can be executed on the command target.
            </summary>
        </member>
        <member name="P:C1.Xaml.CanExecuteRoutedEventArgs.Command">
            <summary>
            Gets the command associated with this event.
            </summary>
        </member>
        <member name="P:C1.Xaml.CanExecuteRoutedEventArgs.ContinueRouting">
            <summary>
            Determines whether the input event that invoked the command 
            should continue to route through the element tree.
            </summary>
        </member>
        <member name="P:C1.Xaml.CanExecuteRoutedEventArgs.Parameter">
            <summary>
            Gets the command specific data.
            </summary>
        </member>
        <member name="T:C1.Xaml.ExecutedRoutedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Xaml.CommandBinding.Executed"/> and 
            <see cref="E:C1.Xaml.CommandBinding.PreviewExecuted"/> events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Xaml.ExecutedRoutedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Xaml.CommandBinding.Executed"/> and 
            <see cref="E:C1.Xaml.CommandBinding.PreviewExecuted"/> routed events.
            </summary>
        </member>
        <member name="P:C1.Xaml.ExecutedRoutedEventArgs.Command">
            <summary>
            Gets the command associated with this event.
            </summary>
        </member>
        <member name="P:C1.Xaml.ExecutedRoutedEventArgs.Parameter">
            <summary>
            Gets the command specific data.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DateSelector">
            <summary>
            Visual element that allows a user to select a date by dragging day month and year from three <see cref="!:C1LoopingList"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateSelector.SelectedDate">
            <summary>
            Gets or sets the date that is displayed as selected in this control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateSelector.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateSelector.SelectedDate"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DateSelector.PropertyChanged">
            <summary>
            Fires when control property is changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateSelector.ToString">
            <summary>
            Converts the <see cref="P:C1.Xaml.C1DateSelector.SelectedDate"/> property value to its equivalent string representation.
            </summary>
            <returns>A string representation of the <see cref="P:C1.Xaml.C1DateSelector.SelectedDate"/> property value.</returns>
        </member>
        <member name="P:C1.Xaml.C1DateSelector.ItemStyle">
            <summary>
            Gets or sets the style applied to each item of the lists of days, months and years.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateSelector.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateSelector.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateSelector.FirstYear">
            <summary>
            Gets or sets the first year of the list of years
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateSelector.FirstYearProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateSelector.FirstYear"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateSelector.LastYear">
            <summary>
            Gets or sets the last year of the list of years
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateSelector.LastYearProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateSelector.LastYear"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateSelector.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1DateSelector"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateSelector.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1DateSelector"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1DateTimeSelector">
            <summary>
            Visual element that allows to pick up a date field which pops up a dialog containing a date editor.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.SelectedDate">
            <summary>
            Gets or sets the date that is displayed as selected in this control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.SelectedDate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.MinDate">
            <summary>
            Gets or sets the minimum DateTime value allowed for the <see cref="T:C1.Xaml.C1DateTimeSelector" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.MinDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.MinDate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.MaxDate">
            <summary>
            Gets or sets the maximum DateTime allowed for the <see cref="T:C1.Xaml.C1DateTimeSelector" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.MaxDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.MaxDate"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.UpdateCulture">
            <summary>
            Updates all culture-dependant values.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DateTimeSelector.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1DateTimeSelector.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="E:C1.Xaml.C1DateTimeSelector.SelectedDateChanged">
            <summary>
            Fires when the <see cref="P:C1.Xaml.C1DateTimeSelector.SelectedDate"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.OnSelectedDateChanged(C1.Xaml.NullablePropertyChangedEventArgs{System.DateTime})">
            <summary>
            Raises the <see cref="T:System.DateTime"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.ToString">
            <summary>
            Provides a text representation of the selected date.
            </summary>
            <returns>
            A text representation of the selected date, or an empty string if
            SelectedDate is a null reference.
            </returns>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.AllowNull">
            <summary>
            Gets or sets whether the control accepts null values.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.AllowNullProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.AllowNull"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.DateFormat">
            <summary>
            Gets or sets the format string to use when converting the selected date to a string.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.DateFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.DateFormat"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.TimeFormat">
            <summary>
            Gets or sets the format string to use when converting the selected time to a string.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.TimeFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.TimeFormat"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DateTimeSelector.EditMode">
            <summary>
            Defines edit mode.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimeSelector.EditModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DateTimeSelector.EditMode"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1DateTimeSelector"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DateTimeSelector.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1DateTimeSelector"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.NullablePropertyChangedEventArgs`1">
            <summary>
            Wrapper class for the <see cref="T:C1.Xaml.PropertyChangedEventArgs`1"/> class for case when T 
            is <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">structure</typeparam>
            <remarks>
            This class is required for design-time, as VS 2010 can't work with nested generic attributes 
            directly when adding event handlers in xaml.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1DateTimePickerEditMode">
            <summary>
            Determines the <see cref="T:C1.Xaml.C1DateTimeSelector"/> edit mode.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimePickerEditMode.Date">
            <summary>
            The <see cref="T:C1.Xaml.C1DateTimeSelector"/> control shows date part only.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimePickerEditMode.Time">
            <summary>
            The <see cref="T:C1.Xaml.C1DateTimeSelector"/> control shows time part only.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DateTimePickerEditMode.DateTime">
            <summary>
            The <see cref="T:C1.Xaml.C1DateTimeSelector"/> control shows date and time parts.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TimeSelector">
            <summary>
            Visual element that allows a user to select a date by dragging day month and year from three <see cref="!:C1LoopingList"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TimeSelector.GetCulture(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Returns the <see cref="T:System.Globalization.CultureInfo"/> object for formatting culture-dependant values in the specified element.
            This method honors FrameworkElement.Language property if it has been set on the specified element or on some parent element in the visual tree.
            If Language property hasn't been set, then method returns CultureInfo.CurrentCulture.
            </summary>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement"/> object to check the.</param>
            <returns>The <see cref="T:System.Globalization.CultureInfo"/> object for formatting culture-dependant values in the specified element.</returns>
        </member>
        <member name="E:C1.Xaml.C1TimeSelector.PropertyChanged">
            <summary>
            Fires when control property is changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TimeSelector.ToString">
            <summary>
            Converts the <see cref="P:C1.Xaml.C1TimeSelector.SelectedTime"/> property value to its equivalent string representation.
            </summary>
            <returns>A string representation of the <see cref="P:C1.Xaml.C1TimeSelector.SelectedTime"/> property value.</returns>
        </member>
        <member name="P:C1.Xaml.C1TimeSelector.SelectedTime">
            <summary>
            Gets or sets the selected time.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TimeSelector.SelectedTimeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TimeSelector.SelectedTime"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TimeSelector.ItemStyle">
            <summary>
            Gets or sets the style applied to each item of the lists of hours minutes and AM/PM list.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TimeSelector.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TimeSelector.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TimeSelector.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TimeSelector"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TimeSelector.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TimeSelector"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.MaskFormat">
            <summary>
            Defines how to format the value inside of a <see cref="T:C1.Xaml.C1MaskedTextBox"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.MaskFormat.IncludePrompt">
            <summary>
            Return text input by the user as well as any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.Xaml.MaskFormat.IncludeLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask.
            </summary>
        </member>
        <member name="F:C1.Xaml.MaskFormat.IncludePromptAndLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask and any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.Xaml.MaskFormat.ExcludePromptAndLiterals">
            <summary>
            Return only text input by the user.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1MaskedTextBox">
            <summary>
            Represents a control that uses a mask to prevent users from entering invalid data.
            </summary>
            <summary>
            The C1MaskedTextBox is an editor that uses a mask to prevent end-users from entering invalid data.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.Culture">
            <summary>
            Sets the culture used to display the value in the <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.CultureProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.Culture"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.IsValid">
            <summary>
            Gets a value that determines whether the control contains a valid entry.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MaskedTextBox.MaskedTextChanged">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <remarks>
            Just after the Text property has beed changed via user input or code, 
            the <see cref="T:C1.Xaml.C1MaskedTextBox"/> updates the text again in order to make it consistent with
            the <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/>. As a result, the TextChanged event can be triggered twice on each user
            input. In contrast to this, the <see cref="E:C1.Xaml.C1MaskedTextBox.MaskedTextChanged"/> is triggered only when Text is
            updated with a value that conforms to the <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/>.
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1MaskedTextBox.UpdateValue">
            <summary>
            For Silverlight version of the control, forces <see cref="T:C1.Xaml.C1MaskedTextBox"/> to update its 
            <see cref="P:C1.Xaml.C1MaskedTextBox.Value"/> and Text properties when the control is not loaded. 
            Does nothing in WPF.
            </summary>
            <remarks>
            In Silverlight, when <see cref="T:C1.Xaml.C1MaskedTextBox"/> is not loaded yet or not included in a visual
            tree at all, it doesn't get notifications about the Text property changes and can't update its
            <see cref="P:C1.Xaml.C1MaskedTextBox.Value"/> and Text properties at the proper time therefore, this behavior is inherited
            from the base TextBox control. If you need to get correct values of these properties while the control
            is not loaded, call the <see cref="M:C1.Xaml.C1MaskedTextBox.UpdateValue"/> method after you changed the properties that affect
            a text formatting, such as <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/>, <see cref="P:C1.Xaml.C1MaskedTextBox.TextMaskFormat"/> and so on.
            <para>
            This method does nothing when Silverlight version of the control is loaded, as well as in the WPF
            version of the control at any moment independently of its load state.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1MaskedTextBox.OnMaskedTextChanged(C1.Xaml.MaskedTextChangedEventArgs)">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <see cref="E:MaskedTextChanged"/>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.Value">
            <summary>
            Gets or sets the formatted content of the control as specified by the <see cref="P:C1.Xaml.C1MaskedTextBox.TextMaskFormat" /> property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.Mask">
            <summary>
            Gets or sets the input mask.
            </summary>
            <remarks>
            <para>The mask consists of a string that determines what class of character is acceptable
            at each input position.</para>
            <para>Valid mask characters are:</para>
            <para>
            <b>0</b>    Digit (0-9)</para>
            <para>
            <b>9</b>    Digit or space</para>
            <para>
            <b>#</b>    Digit, space, or sign (+/-)</para>
            <para>
            <b>L</b>    Letter</para>
            <para>
            <b>?</b>    Letter or space</para>
            <para>
            <b>A</b>    Letter or digit</para>
            <para>
            <b>a</b>    Letter, digit, or space</para>
            <para>
            <b>&amp;</b>    Any character</para>
            <para>
            <b>.</b>    Localized decimal symbol</para>
            <para>
            <b>,</b>    Localized thousand separator</para>
            <para>
            <b>:</b>    Localized time separator</para>
            <para>
            <b>/</b>    Localized date separator</para>
            <para>Other characters are treated as literals. They are displayed in the control but cannot
            be edited.</para>
            <para>For example, the mask "000-0000" causes the control to accept only digits at every
            position except the third, which always contains a dash.</para>
            
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.MaskProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.Mask"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.PromptChar">
            <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.PromptCharProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.PromptChar"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.TextMaskFormat">
            <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="P:C1.Xaml.C1MaskedTextBox.Value" /> property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.TextMaskFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.TextMaskFormat"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.ReplaceMode">
            <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
            <remarks>
            Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.ReplaceModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.ReplaceMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MaskedTextBox.AutoConvert">
            <summary>
            Gets or sets whether to automatically convert the entered characters according to the input mask.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MaskedTextBox.AutoConvertProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MaskedTextBox.AutoConvert"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MaskedTextBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1MaskedTextBox"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.MaskedTextChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Xaml.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Xaml.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:C1.Xaml.MaskedTextChangedEventArgs"/> class.
            </summary>
            <param name="newText">
            The new text.
            </param>
            <param name="oldText">
            The old text.
            </param>
        </member>
        <member name="P:C1.Xaml.MaskedTextChangedEventArgs.OldText">
            <summary>
            Gets an old text.
            </summary>
        </member>
        <member name="P:C1.Xaml.MaskedTextChangedEventArgs.NewText">
            <summary>
            Gets a new text.
            </summary>
        </member>
        <member name="T:C1.Xaml.MaskedTextChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.Xaml.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="T:C1.Xaml.C1NumericBox">
            <remarks>
            <list>
            <item>
            <see cref="P:C1.Xaml.C1NumericBox.Format" /> property supports standard and custom formats.</item>
            <item>
            <see cref="P:C1.Xaml.C1NumericBox.Watermark" /> property shows help text when the control is empty.</item>
            <item>
            <see cref="P:C1.Xaml.C1NumericBox.AllowNull" /> property allows binding to and displaying null values.</item>
            </list>
            When the control is empty, or bound to a null value, the <see cref="P:C1.Xaml.C1NumericBox.Value" /> property returns <b>double.NaN</b>.
            </remarks>
            <summary>
            The C1NumericBox control is a numeric editor that allows you to display and edit numeric values in many formats.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1NumericBox.OnValueChanged(System.Double)">
            Value property setter
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Culture">
            <summary>
            Sets the culture used to display the value in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.CultureProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Culture"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1NumericBox.ValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Xaml.C1NumericBox.Value"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.OnValueChanged(C1.Xaml.PropertyChangedEventArgs{System.Double})">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1NumericBox.ValueChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects the text specified by start and length.
            </summary>
            <param name="start">Start of the selection.</param>
            <param name="length">Length of the selection.</param>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.ConvertToInvariantNumber(System.String)">
            <summary>
            Translates culture specific digit chars (i.e. non '0'-'9') to standard chars in the specified
            string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
            <summary>
            Updates the current visual state of the ButtonsVisibility visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Format">
            <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
            <remarks>
            The property accepts any standard or custom numeric format supported by the String.Format method.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.FormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Format"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Maximum">
            <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Minimum">
            <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Increment">
            <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.IncrementProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Increment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Value">
            <summary>
            Gets or sets the numeric value in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
            <remarks>
            Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="P:C1.Silverlight.C1NumericBox.AllowNull" /> property.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.ShowButtons">
            <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ShowButtonsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.ShowButtons"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.IsReadOnly">
            <summary>
            Gets or sets the value that determines if the <see cref="T:C1.Xaml.C1NumericBox" /> is read-only.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.IsReadOnly"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.TextAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Text">
            <summary>
            Gets the text shown in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Text"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.SelectionStart">
            <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.SelectionStartProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.SelectionStart"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.SelectionLength">
            <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.Xaml.C1NumericBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.SelectionLengthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.SelectionLength"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.AllowNull">
            <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
            <remarks>
            Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.AllowNullProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.AllowNull"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Delay">
            <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Interval">
            <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.InputScope">
            <summary>
            Gets or sets the keyboard type that will appear when the user set the focus in the numeric box.
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-us/library/system.windows.input.inputscopenamevalue(v=vs.95).aspx for more information.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.InputScopeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.InputScope"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.Watermark">
            <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.WatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.Watermark"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.HandleUpDownKeys">
            <summary>
            Gets or sets If the control handles the Up / Down / PageUp / PageDown keys.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.HandleUpDownKeysProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.HandleUpDownKeys"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.RangeValidationMode">
            <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.RangeValidationModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.RangeValidationMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>
            The default value is OnDefaultSelection.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1NumericBox.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Xaml.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.SelectionBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> that fills the background of the selected text.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.SelectionBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.SelectionBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.SelectionForeground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used as foreground of the selected text.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.SelectionForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.SelectionForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.CaretBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> of the blinking cursor of an input control.  When .NET Framework is v3.5, 'CaretBrush' takes no effect.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.CaretBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.ButtonBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ButtonBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.ButtonBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1NumericBox.ButtonForeground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NumericBox.ButtonForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1NumericBox.ButtonForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1NumericBox"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NumericBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1NumericBox"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.RangeValidationMode">
            <summary>
            Mode of validation of the range between Maximum and Minimum of <see cref="T:C1.Xaml.C1NumericBox"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.RangeValidationMode.Always">
            <summary>
            This mode doesn't allow entering out of range values.
            </summary>
        </member>
        <member name="F:C1.Xaml.RangeValidationMode.AlwaysTruncate">
            <summary>
            This mode doesn't allow entering out of range values.
            The value will be truncated if the limits are exceeded.
            </summary>
        </member>
        <member name="F:C1.Xaml.RangeValidationMode.OnLostFocus">
            <summary>
            The value will be truncated on lost focus.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1RangeSlider">
            <summary>
            The C1RangeSlider control enables the end-user to select two values from a range by moving two Thumb controls along a track.
            </summary>	
        </member>
        <member name="E:C1.Xaml.C1RangeSlider.UpperValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Xaml.C1RangeSlider.UpperValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.UpperValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RangeSlider.LowerValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Xaml.C1RangeSlider.LowerValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.LowerValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RangeSlider.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.ValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.UpdateTrackLayout">
            <summary> 
            This method will take the current min, max, and value to 
            calculate and layout the current control measurements.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.LowerValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.LowerValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.UpperValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.UpperValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.ValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.ValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.ValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.Delay">
            <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.Interval">
            <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.Orientation">
            <summary>
            The Orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1RangeSlider.OrientationChanged">
            <summary> 
            Event raised when the <see cref="P:Orientation"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.SmallValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.SmallValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.SmallValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.RangeSliderBarVisibility">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.RangeSliderBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.RangeSliderBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1RangeSlider.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Xaml.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RangeSlider.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RangeSlider.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RangeSlider.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RangeSlider"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RangeSlider.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RangeSlider"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TextBoxBase">
            <summary> 
            Base class for all ComponentOne text box controls.
            </summary>
            <remarks>
            Adds <see cref="P:C1.Silverlight.C1TextBoxBase.Watermark" /> and <see cref="P:C1.Silverlight.C1TextBoxBase.IsEnabled" /> properties, 
            as well as styles for mouse over and focus.
            </remarks>
        </member>
        <member name="E:C1.Xaml.C1TextBoxBase.KeyDown">
            <summary>
            Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement"/> has focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.C1TextProperty">
            <summary>
            Identifies the C1Text dependency property.
            </summary>
            <remarks>
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </remarks>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.C1Text">
            <summary>
            Get or set the C1Text property.
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TextBoxBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.IsWatermarked">
            <summary>
            Gets a value indicating whether this textbox is watermarked.
            </summary>
            <value>
            	<c>true</c> if this textbox is watermarked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.OnIsFocusedChanged(System.Boolean)">
            <summary>
            Callback called when the <see cref="P:IsFocused"/> property changes.
            </summary>
            <param name="oldValue">The previous value of IsFocused.</param>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.OnTextChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called immediately after the Text property changes.
            </summary>
            <param name="e">Provides data about the change.</param>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.UpdateIsWatermarked">
            <summary>
            Derived classes can call this method when the <see cref="P:IsWatermarked"/> state is changed from their point of view.
            This method forces the IsWatermarked state to be updated without clearing the Text property.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.ChangeVisualStateWatermark(System.Boolean)">
            <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.Watermark">
            <summary>
            Gets or sets the content of the watermark.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.WatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.Watermark"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>
            The default value is OnDefaultSelection.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Xaml.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TextBoxBase.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TextBoxBase.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TextBoxBase.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TextBoxBase"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TextBoxBase.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TextBoxBase"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.SelectOnFocusCondition">
            <summary>
            Defines the possible conditions that cause selection of an entire control text when control receives focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectOnFocusCondition.Never">
            <summary>
            Never select a text.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectOnFocusCondition.Always">
            <summary>
            Always select a text.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectOnFocusCondition.OnDefaultSelection">
            <summary>
            Select text only if the both SelectionStart and SelectionLength properties are set to zero.
            </summary>
        </member>
        <member name="T:C1.Xaml.ValidationState">
            <summary>
            Enumerates binding validation states.
            </summary>
        </member>
        <member name="F:C1.Xaml.ValidationState.Valid">
            <summary>
            All bindings are valid.
            </summary>
        </member>
        <member name="F:C1.Xaml.ValidationState.InvalidFocused">
            <summary>
            A binding is invalid and the control is focused.
            </summary>
        </member>
        <member name="F:C1.Xaml.ValidationState.InvalidUnfocused">
            <summary>
            A binding is invalid and the control is unfocused.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ValidationDecorator">
            <summary>
            Displays binding validation errors.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1ValidationDecorator.ChangeVisualStateValidationStates(System.Boolean)">
            <summary>
            Updates the current visual state of the ValidationStates visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ValidationDecorator.ValidationState">
            <summary>
            Gets or sets the <see cref="P:C1.Xaml.C1ValidationDecorator.ValidationState"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ValidationDecorator.ValidationStateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ValidationDecorator.ValidationState"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ValidationDecorator.Target">
            <summary>
            Gets or sets the target of the validation.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ValidationDecorator.TargetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ValidationDecorator.Target"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ValidationDecorator.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ValidationDecorator.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ValidationDecorator.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ValidationDecorator.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ValidationDecorator"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ValidationDecorator.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ValidationDecorator"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.CompositeTextUtils">
            <summary>
            Provides utilities for processing a text where each glyph can be represented by multiple
            unicode chars. Such a text in the utility methods is represented by an array of strings,
            where each string represents a single glyph.
            </summary>
        </member>
        <member name="T:C1.Xaml.ISpellChecker">
            <summary>
            Provides spell checking services.
            </summary>
            <remarks>
            This interface is implemented by C1SpellChecker in the C1.Silverlight.SpellChecker assembly.
            </remarks>
        </member>
        <member name="M:C1.Xaml.ISpellChecker.CheckText(System.String)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <returns>List of <see cref="T:C1.Xaml.ICharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.Xaml.ISpellChecker.GetSuggestions(System.String,System.Int32)">
            <summary>
            Gets a list of suggestions for a misspelled word.
            </summary>
            <param name="word">Word to suggest alternatives for.</param>
            <param name="maxSuggestions">Maximum number of suggestions to provide.</param>
            <returns>A list of suggestions for the <paramref name="word"/> parameter.</returns>
        </member>
        <member name="M:C1.Xaml.ISpellChecker.ShowSuggestionsMenu(System.Object,Windows.Foundation.Point,System.String,System.Action{System.String})">
            <summary>
            Shows a context menu with suggestions for a misspelled word.
            </summary>
            <param name="editor">The editor control whose content is being spell checked.</param>
            <param name="position">The position in absolute plug-in coordinates where the menu should be open.</param>
            <param name="word">The misspelled word.</param>
            <param name="correctCallback">Callback called when a suggested correction is chosen.</param>
        </member>
        <member name="M:C1.Xaml.ISpellChecker.CheckControlAsync(System.Object)">
            <summary>
            Shows a spell-checking dialog for an editor control.
            </summary>
            <param name="editor">Object that contains the text to be spell-checked.</param>
        </member>
        <member name="P:C1.Xaml.ISpellChecker.IgnoreList">
            <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
        </member>
        <member name="P:C1.Xaml.ISpellChecker.UserDictionary">
            <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
        </member>
        <member name="P:C1.Xaml.ISpellChecker.Enabled">
            <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
        </member>
        <member name="E:C1.Xaml.ISpellChecker.DictionaryChanged">
            <summary>
            Event that fires when any of the spell dictionaries changes in any way.
            </summary>
            <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It fires for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
        </member>
        <member name="T:C1.Xaml.ICharRange">
            <summary>
            Represents a character range within a string.
            This is used by <see cref="T:C1.Xaml.ISpellChecker"/> to represent the
            spelling mistakes found in text.
            </summary>
        </member>
        <member name="P:C1.Xaml.ICharRange.Start">
            <summary>
            Gets the index of the start of the range.
            </summary>
        </member>
        <member name="P:C1.Xaml.ICharRange.Length">
            <summary>
            Gets the length of the range.
            </summary>
        </member>
        <member name="P:C1.Xaml.TokenizedMask.AutoConvert">
            <summary>
            Gets or sets a value indicating whether the char can be converted automatically.
            </summary>
            <value>
              A <b>bool</b> value, <b>true</b> if the char can be converted automatically; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.TranslateContextDependentLiteral(System.String)">
            <summary>
            If passed literal is not context dependent then returns the passed value.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.IsBinary(System.Char)">
            <summary>
              Checks whether the special character is a binary character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a binary character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.IsHex(System.Char)">
            <summary>
              Checks whether the special character is a hex character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a hex character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.IsSymbol(System.Char)">
            <summary>
              Checks whether the special character is a symbol character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a symbol character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.IsNumberSymbol(System.Char)">
            <summary>
              Checks whether the special character is a number symbol character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a number symbol character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.FindNextPrompt(System.Int32,System.Boolean)">
            <summary>
            offset = -1 means "before first"
            offset = Tokens.Count means "after last"
            </summary>
        </member>
        <member name="M:C1.Xaml.TokenizedMask.GetApplicableSymbolList(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a list of symbols where non applicable symbols are excessive trailing symbols are excluded.
            </summary>
        </member>
        <member name="P:C1.Xaml.MaskToken.IsLiteral">
            <summary>
            Indicates whether the token represents a literal or a prompt symbol.
            </summary>
        </member>
        <member name="P:C1.Xaml.MaskToken.OutputSymbol">
            <summary>
            Gets a symbol that as it's shown in the TextBox.
            </summary>
        </member>
        <member name="P:C1.Xaml.MaskToken.OriginalSymbol">
            <summary>
            Gets an original mask symbol, as defined in the TextBox.Mask property.
            </summary>
        </member>
        <member name="P:C1.Xaml.PromptToken.IsUppercase">
            <summary>
            true - force upper case
            false - force lower case
            null - show as is
            </summary>
        </member>
        <member name="P:C1.Xaml.PromptToken.Value">
            <summary>
            Gets or sets a user input for this prompt.
            </summary>
        </member>
        <member name="P:C1.Xaml.PromptToken.IsEmpty">
            <summary>
            Indicates whether an input is entered in the token.
            </summary>
        </member>
        <member name="M:C1.Xaml.PromptToken.ClearValue">
            <summary>
            Set the Value property to a default value.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragHelper">
            <summary>
            Cross-platform helper for listening to drag gestures supporting inertia.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragHelper.#ctor(Windows.UI.Xaml.UIElement,C1.Xaml.C1DragHelperMode,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.Xaml.C1DragHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the drag gesture will be listened.</param>
            <param name="mode">Indicates the sort of drag to be listened. Combine inertia flag with other flags so that DragDelta events are raised after the manipulation finish. i.e. C1DragHelperMode.FreeDrag | C1DragHelperMode.Inertia</param>
            <param name="initialThreshold">Specifies the number of pixels the gesture will have to pass in order to start. if 0 is set the gesture will start on pointer down, and captureElementOnPointerPressed will be true despite the specified parameter, otherwise the gesture will start on mouse move, default value is 1</param>
            <param name="captureElementOnPointerPressed">Indicates whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WinRT) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WinRT). If initialThreshold is 0 this parameter will be ignored.<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks></param>
            <param name="handledEventsToo">Indicates whether drag gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise itwill use Pointer events.</param>
            <param name="useRightButton">if set to <c>true</c> it will listen to mouse right button down/up events instead of left button events(In WinRT it only applies if useManipulationEvents is set to false).</param>
        </member>
        <member name="E:C1.Xaml.C1DragHelper.DragStarting">
            <summary>
            Occurs when a drag gesture is about to start.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DragHelper.DragStarted">
            <summary>
            Occurs when a drag gesture started.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DragHelper.DragDelta">
            <summary>
            Occurs while a drag gesture is performed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DragHelper.DragCompleted">
            <summary>
            Occurs after a drag gesture completed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DragHelper.DragInertiaStarted">
            <summary>
            Occurs when the inertia is about to start.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragHelper.FinalizeDrag">
            <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragHelper.Complete">
            <summary>
            Finalizes drag gesture.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragHelper.SetManipulationMode(Windows.UI.Xaml.UIElement,C1.Xaml.C1DragHelperMode)">
            <summary>
            Sets the <see cref="!:ManipulationMode"/> of the specified element so that drag operation can be performed according to the specified mode.
            </summary>
            <param name="element">The element whose <see cref="!:ManipulationMode"/> will be set.</param>
            <param name="mode">The mode that determines the <see cref="!:ManipulationMode"/> that is set in the specified element.</param>
        </member>
        <member name="T:C1.Xaml.C1DragEventArgs">
            <summary>
            Contains information of the drag events.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragEventArgs.DragHelper">
            <summary>
            Gets a reference to the <see cref="T:C1.Xaml.C1DragHelper"/> that originated the event.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragStartingEventArgs">
            <summary>
            Contains information of the DragStarting event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartingEventArgs.Mode">
            <summary>
            Gets or sets the mode indicating the sort of drag to be listened.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartingEventArgs.CaptureElementOnPointerPressed">
            <summary>
            Gets or sets a value indicating whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in WinRT) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in WinRT).<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks>
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartingEventArgs.InitialThreshold">
            <summary>
            Gets or sets the number of pixels the gesture will have to pass in order to start.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the recognizion of this gesture is canceled.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragStartedEventArgs">
            <summary>
            Contains information of the DragStarted event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartedEventArgs.Origin">
            <summary>
            Gets the absolute point where the gesture started.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragStartedEventArgs.Direction">
            <summary>
            Gets the initial direction of the drag gesture.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragDeltaEventArgs">
            <summary>
            Contains information of the DragDelta event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragDeltaEventArgs.IsInertial">
            <summary>
            Gets a value indicating whether this event is raised because of a direct manipulation or is inertial.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DragDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragInertiaStartedEventArgs">
            <summary>
            Contains information of the DragInertiaStarted event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragInertiaStartedEventArgs.Velocity">
            <summary>
            Gets the velocity of the gesture before the inertia started.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragInertiaStartedEventArgs.DesiredDeceleration">
            <summary>
            Gets or sets the deceleration of the drag inertia (pixels by millisecond)
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragCompletedEventArgs">
            <summary>
            Contains information of the DragCompleted event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DragCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1PointerDeviceType">
            <summary>
            Enumerates the different kind of devices which can perform drag operations.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1PointerDeviceType.Mouse">
            <summary>
            Mouse device
            </summary>
        </member>
        <member name="F:C1.Xaml.C1PointerDeviceType.Touch">
            <summary>
            Touch screen
            </summary>
        </member>
        <member name="F:C1.Xaml.C1PointerDeviceType.Pen">
            <summary>
            Pen device
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DragHelperMode">
            <summary>
            Determines the kind of drag gesture that will be listened.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.TranslateX">
            <summary>
            The drag will be performed only considering x coordinates.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.TranslateY">
            <summary>
            The drag will be performed only considering y coordinates.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.TranslateXY">
            <summary>
            Both x and y coordinates will be considered in the gesture.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.Inertia">
            <summary>
            Apply inertia when drag finish.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.TranslateRailX">
            <summary>
            The drag will be performed in the x coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DragHelperMode.TranslateRailY">
            <summary>
            The drag will be performed in the y coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1InputEventArgs">
            <summary>
            Contains information of the drag events.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1InputEventArgs.OriginalEventArgs">
            <summary>
            Gets the arguments of the original event which raised this event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1InputEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1InputEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1InputEventArgs.PointerDeviceType">
            <summary>
            Gets the type of pointer which performed the action.
            </summary>
            <remarks>
            In Silverlight, 'windowless' plug-in parameter must be set to false in order 
            to receive the correct device type, otherwise 'Mouse' will be returned 
            despite the real device type.
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1InputEventArgs.GetPosition(Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the position of the pointer performing the drag gesture relatively to the specified element.
            </summary>
            <param name="relativeTo">Any UIElement-derived object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1InputEventArgs.GetPosition(Windows.UI.Xaml.RoutedEventArgs,Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the position of the pointer or finger.
            </summary>
            <param name="args">The <see cref="T:Windows.UI.Xaml.RoutedEventArgs" /> instance containing the manipulation data.</param>
            <param name="relativeTo">Any UIElement-derived object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.C1ScrollHelper">
            <summary>
            Cross-platform helper for listening to scroll gestures using mouse wheel.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.Xaml.C1ScrollHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the zoom gesture will be listened.</param>
            <param name="avoidIfCtrlPressed">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousScroll">If set to true it will raise intermediate events to perform a continuous scroll, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.Xaml.C1ScrollHelper.ScrollStarted">
            <summary>
            Occurs when a scroll gesture started.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ScrollHelper.ScrollDelta">
            <summary>
            Occurs while a scroll gesture is performed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ScrollHelper.ScrollCompleted">
            <summary>
            Occurs after a scroll gesture completed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollHelper.FinalizeScroll">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ScrollEventArgs">
            <summary>
            Contains information of the scroll events.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ScrollStartedEventArgs">
            <summary>
            Contains information of the ScrollStarted event.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ScrollDeltaEventArgs">
            <summary>
            Contains information of the ScrollDelta event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollDeltaEventArgs.DeltaScroll">
            <summary>
            Gets the delta scroll.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollDeltaEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ScrollCompletedEventArgs">
            <summary>
            Contains information of the ScrollCompleted event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollCompletedEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TapHelper">
            <summary>
            Cross-platform helper for listening to tapped and double-tapped events.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TapHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1TapHelper"/> class.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the tap gestures will be listened.</param>
            <param name="handledEventsToo">Indicates whether tap gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
        </member>
        <member name="M:C1.Xaml.C1TapHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TapHelper.Tapped">
            <summary>
            Occurs when the element is tapped (clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TapHelper.DoubleTapped">
            <summary>
            Occurs when the element is double-tapped (double-clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TapHelper.RightTapped">
            <summary>
            Occurs when the element is tapped with right mouse button.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TapHelper.Holding">
            <summary>
            Occurs when a Hold gesture is performed over the element.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TappedEventArgs">
            <summary>
            Contains information of the tap events.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TappedEventArgs.#ctor(Windows.UI.Xaml.RoutedEventArgs,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1TappedEventArgs" /> class.
            </summary>
            <param name="originalArgs">The <see cref="!:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
            <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
        </member>
        <member name="P:C1.Xaml.C1TappedEventArgs.IsRightTapped">
            <summary>
            Gets a value indicating whether the event is performed with the right button of the mouse.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ZoomHelper">
            <summary>
            Cross-platform helper for listening to zoom gestures either using the mouse or fingers.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.Xaml.C1ZoomHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the zoom gesture will be listened.</param>
            <param name="ctrlRequired">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousZoom">If set to true it will raise intermediate events to perform a continuous zoom, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.Xaml.C1ZoomHelper.ZoomStarted">
            <summary>
            Occurs when a zoom gesture started.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ZoomHelper.ZoomDelta">
            <summary>
            Occurs while a zoom gesture is performed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ZoomHelper.ZoomCompleted">
            <summary>
            Occurs after a zoom gesture completed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomHelper.FinalizeZoom">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ZoomEventArgs">
            <summary>
            Contains information of the zoom events.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ZoomStartedEventArgs">
            <summary>
            Contains information of the ZoomStarted event.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ZoomDeltaEventArgs">
            <summary>
            Contains information of the ZoomDelta event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.DeltaScale">
            <summary>
            Gets the delta scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.UniformDeltaScale">
            <summary>
            Gets the uniform delta scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ZoomCompletedEventArgs">
            <summary>
            Contains information of the ZoomCompleted event.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomCompletedEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomCompletedEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ContextMenu">
            <summary>
            The C1ContextMenu control represents a menu that can be displayed when the user clicks the right mouse button over a control.
            </summary>	
        </member>
        <member name="E:C1.Xaml.C1ContextMenu.OffsetChanged">
             <summary>
            Occurs when the C1ContextMenu offset changes.
             </summary>
        </member>
        <member name="E:C1.Xaml.C1ContextMenu.Closing">
            <summary>
            Occurs when the C1ContextMenu is Closing.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ContextMenu.Opening">
            <summary>
            Occurs when the C1ContextMenu is Opening.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ContextMenu.Opened">
             <summary>
            Occurs when the C1ContextMenu opens.
             </summary>
        </member>
        <member name="E:C1.Xaml.C1ContextMenu.Closed">
             <summary>
            Occurs when the C1ContextMenu closes.
             </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Closed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Opened"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Closing"/> event.
            </summary>
            <param name="e">The <see cref="!:C1.Silverlight.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Opening"/> event.
            </summary>
            <param name="e">The <see cref="!:C1.Silverlight.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnAutoCloseChanged(System.Boolean)">
            <summary>
            Called when the property AutoClose changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.Show(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            Displays the context menu at the specified position. 
            </summary>
            <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
            <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.Hide">
            <summary>
            Hides the context menu
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="P:C1.Xaml.C1ContextMenu.Offset">
            <summary>
            Gets the current position of the C1ContextMenu relative to the control it is associated with.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ContextMenu.OffsetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ContextMenu.Offset"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ContextMenu.PlacementTarget">
            <summary>
            Gets or sets the FrameworkElement relative to which the C1ContextMenu is positioned when it opens. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ContextMenu.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ContextMenu.PlacementTarget"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ContextMenu.HighlightedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the menu item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ContextMenu.HighlightedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ContextMenu.HighlightedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ContextMenu.OpenedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ContextMenu.OpenedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ContextMenu.OpenedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ContextMenu"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenu.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ContextMenu"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.IC1ContextMenu">
            <summary>
            Defines the context menu interface.
            </summary>
        </member>
        <member name="M:C1.Xaml.IC1ContextMenu.Show(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            Displays the context menu at the specified position. 
            </summary>
            <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
            <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
        </member>
        <member name="P:C1.Xaml.IC1ContextMenu.PlacementTarget">
            <summary>
            Gets or sets the FrameworkElement relative to which the context menu is positioned when it opens. 
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ContextMenuService">
            <summary>
            Represents a service that provides static methods to display a context menu. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.GetContextMenu(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the context menu for a control.
            </summary>
            <param name="element">The control from which the context menu is retrieved.</param>
            <returns>The control's context menu.</returns>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.SetContextMenu(Windows.UI.Xaml.DependencyObject,C1.Xaml.IC1ContextMenu)">
            <summary>
            Sets the context menu for a control.
            </summary>
            <param name="element">The Control to which the context menu is attached.</param>
            <param name="value">The context menu to set.</param>
        </member>
        <member name="F:C1.Xaml.C1ContextMenuService.ContextMenuProperty">
            <summary>
            Identifies the ContextMenu dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.GetMenuOpenMode(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the MenuOpenMode property for a control.
            </summary>
            <param name="element">The control from which the property is retrieved.</param>
            <returns>The <see cref="T:C1.Xaml.ContextMenuOpenMode"/> value.</returns>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.SetMenuOpenMode(Windows.UI.Xaml.DependencyObject,C1.Xaml.ContextMenuOpenMode)">
            <summary>
            Sets the MenuOpenMode property for a control.
            </summary>
            <param name="element">The control to which the property is attached.</param>
            <param name="value">The <see cref="T:C1.Xaml.ContextMenuOpenMode"/> value to set.</param>
        </member>
        <member name="F:C1.Xaml.C1ContextMenuService.MenuOpenModeProperty">
            <summary>
            Identifies the MenuOpenMode attached property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.GetShowHoldingIndicator(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the ShowHoldingIndicator property for a control.
            </summary>
            <param name="element">The control from which the property is retrieved.</param>
            <returns>True if the <see cref="T:C1.Xaml.C1ContextMenuService"/> should show holding indicator. False otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.C1ContextMenuService.SetShowHoldingIndicator(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the ShowHoldingIndicator property for a control.
            </summary>
            <param name="element">The control to which the property is attached.</param>
            <param name="value">The <see cref="T:System.Boolean"/> value to set.</param>
        </member>
        <member name="F:C1.Xaml.C1ContextMenuService.ShowHoldingIndicatorProperty">
            <summary>
             Identifies the ShowHoldingIndicator attached property
            </summary>
        </member>
        <member name="T:C1.Xaml.ContextMenuOpenMode">
            <summary>
            Specifies what events should be used by the <see cref="T:C1.Xaml.C1ContextMenuService"/> to show context menu.
            </summary>
        </member>
        <member name="F:C1.Xaml.ContextMenuOpenMode.RightTapped">
            <summary>
            Context menu should be shown on RightTapped event. This is the default value.
            </summary>
        </member>
        <member name="F:C1.Xaml.ContextMenuOpenMode.Tapped">
            <summary>
            Context menu should be shown on Tapped event.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1HierarchicalPresenter">
            <summary>
            Represents a control that contains multiple items and has a header.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyleSelector">
            <summary>
            Gets or sets custom style-selection logic for a style that can be applied to each generated container element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyleSelectorProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.ItemContainerStyleSelector"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ItemTemplateSelector">
            <summary>
            Provides a way to choose a DataTemplate based on the data object and the data-bound element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.ItemTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.ItemTemplateSelector"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1HierarchicalPresenter.ItemPrepared">
            <summary>
            Occurs when a C1HierarchicalPresenter child item is prepared
            (PrepareContainerForItemOverride was invoked).
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.OnItemPrepared(C1.Xaml.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1HierarchicalPresenter.ItemCleared">
            <summary>
            Occurs when a C1HierarchicalPresenter child item is cleared.
            (ClearContainerForItemOverride was invoked).
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.OnItemCleared(C1.Xaml.ItemPreparedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" /> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.HasItems">
            <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ParentCollection">
            <summary>
            Gets the items collection of this element's parent. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ParentItemsSource">
            <summary>
            Returns this element's parent ItemsSource Property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.IsAncestorOf(C1.Xaml.C1HierarchicalPresenter)">
            <summary>
            Determines whether the <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> is an ancestor of the descendant element.
            </summary>
            <param name="descendant">The descendant <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.InitializeItem(C1.Xaml.C1HierarchicalPresenter)">
            <summary>
            Initializes a <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> by setting its parent and root elements
            in the hierarchy.
            </summary>
            <remarks>
            This method should be invoked only when we want to force the initialization of an item 
            before it gets visible. Otherwise the item will be initialized automatically before becoming
            visible.
            </remarks>
            <param name="rootPresenter">The <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> whose this item belongs to.</param>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.ToList``1">
            <summary>
            Creates a list with all the item containers present in the Hierarchical Presenter at
            the moment of invocation.
            </summary>
            <typeparam name="T">The type of the container, e.g. C1TreeViewItem</typeparam>
            <returns>The list of item containers.</returns>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.OnHeaderChanged(System.Object)">
            <summary>
            Called when the value of the <see cref="P:Header"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.HeaderTemplate">
            <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse pointer is located over this element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1HierarchicalPresenter.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalPresenter.ForceMouseOver">
            <summary>
            Gets a value indicating whether to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HierarchicalPresenter.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HierarchicalPresenter.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1HierarchicalPresenter"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HierarchicalPresenter.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1HierarchicalPresenter"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.ItemPreparedEventArgs">
            <summary>
            Contains event data for the item prepared/cleared event.
            The event is associated to the PrepareContainerForItemOverride and ClearContainerForItemOverride
            methods of classes derived from C1HierarchicalPresenter. PrepareContainerForItemOverride and
            ClearContainerForItemOverride are invoked to prepare/clear a visual element to display the 
            specified data bound item.
            </summary>
        </member>
        <member name="P:C1.Xaml.ItemPreparedEventArgs.Element">
            <summary>
            The element used to display the specified item.
            </summary>
        </member>
        <member name="P:C1.Xaml.ItemPreparedEventArgs.Item">
            <summary>
            The item to display.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ItemCollection.CollectionChanged">
            <summary>
            Occurs when the collection changed.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemStyle">
            <summary>
            Style applied to all the items of this item control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemTemplate">
            <summary>
            Template applied to all the items of the list.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemTemplateSelector">
            <summary>
            Template selector used to specify different templates applied to items of the same type.
            </summary>
            <remarks>
            Avoid doing complex tasks in the Select method such as accessing dictionaries because it could make the layout to work slow.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemTemplateSelector"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemsPanel">
            <summary>
            Gets or sets the panel template that will be used when creating the items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemsPanelProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemsPanel"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemsSource">
            <summary>
            Gets or sets the collection of items that will be shown.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemsSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.ItemContainerTransitions">
            <summary>
            Gets or sets the collection of Transition style elements that apply to the item containers of a C1ItemsControl.
            
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.ItemContainerTransitionsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.ItemContainerTransitions"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ItemsControl.DisplayMemberPath">
            <summary>
            Gets or sets the name or path of the property that is displayed for each data item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ItemsControl.DisplayMemberPathProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ItemsControl.DisplayMemberPath"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ItemsControl.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ItemsControl"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ListBox">
            <summary>
            List of items which can be used with heavy templates and preview template to scroll quickly.
            </summary>
            <remarks>
            This contol supports selection by cross-slide gesture.
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1ListBox.InitializePanel">
            <summary>
            Initializes the panel.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListBox.SelectionChanged">
            <summary>
            Occurs when the selection changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListBox.OnItemTapped(System.Object,C1.Xaml.C1TappedEventArgs)">
            <summary>
            Called when one of the items is tapped.
            </summary>
            <param name="sender">The item that was tapped.</param>
            <param name="e">The <see cref="T:C1.Xaml.C1TappedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ListBox.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListBox.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the selection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:C1.Xaml.C1ListBox.SelectionMode">
            <summary>
            Gets or sets if selection is disabled, single, multiple, or extended.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBox.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBox.SelectionMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBox.SelectedItem">
            <summary>
            Gets or set the item which is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBox.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBox.SelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBox.SelectedItems">
            <summary>
            Gets or set the list of items which are selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBox.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBox.SelectedItems"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBox.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBox.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBox.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBox.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBox.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBox.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ListBox"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBoxItem.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBoxItem.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBoxItem.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListBoxItem.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBoxItem.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListBoxItem.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListBoxItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ListBoxItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListBoxItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ListBoxItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1ListBoxItemState">
            <summary>
            State of a <see cref="T:C1.Xaml.C1ListViewerItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBoxItemState.Preview">
            <summary>
            Display the preview template of the <see cref="T:C1.Xaml.C1ListViewerItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListBoxItemState.Full">
            <summary>
            Display the full template of the <see cref="T:C1.Xaml.C1ListViewerItem"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ListViewer">
            <summary>
            List of items which can be used with heavy templates and preview template to scroll quickly.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.InitializeScrollViewerPart">
            <summary>
            Initializes the scroll viewer part.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.InitializePanel">
            <summary>
            Initializes the panel the first time it is loaded.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.Panel">
            <summary>
            Gets the panel associated with this items control.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.VerticalOffsetChanged">
            <summary>
            Occurs when the vertical offset changed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.HorizontalOffsetChanged">
            <summary>
            Occurs when horizontal offset changed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ZoomChanged">
            <summary>
            Occurs when the zoom changed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ItemContainerLoaded">
            <summary>
            Occurs afer an item container was loaded.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ItemContainerUnloading">
            <summary>
            Occurs before an item container was unloaded.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ItemClick">
            <summary>
            Occurs when an item is clicked.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ItemTapped">
            <summary>
            Occurs when an item is tapped.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ListViewer.ItemHolding">
            <summary>
            Occurs when an item held.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.IsScrolling">
            <summary>
            Gets a value indicating whether the list is scrolling.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ScrollViewer">
            <summary>
            Gets the scroll viewer template part belonging to this items control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ActualZoom">
            <summary>
            Gets the actual zoom.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ActualMinZoom">
            <summary>
            Gets the actual minimum zoom.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ActualMaxZoom">
            <summary>
            Gets the actual maximum zoom.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.IsZooming">
            <summary>
            Gets a value indicating whether this list is zooming.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.SetZoom(C1.Xaml.C1ZoomUnit)">
            <summary>
            Sets the zoom setting a flag indicating whether the position should be updated.
            </summary>
            <param name="zoom">The zoom.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.GetIndexAt(Windows.Foundation.Point)">
            <summary>
            Gets the index of the item at the specified position in the screen.
            </summary>
            <param name="screenPoint">The point in the screen relative to this control.</param>
            <returns>The index of the item, otherwise -1</returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.GetAbsolutePoint(Windows.Foundation.Point)">
            <summary>
            Gets a point in layout coordinates from a point in the screen.
            </summary>
            <param name="screenPoint">The screen point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.ScrollToVerticalOffset(System.Double)">
            <summary>
            Scrolls the content to the specified vertical offset position.
            </summary>
            <param name="offset">The target vertical offset position.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.ScrollToHorizontalOffset(System.Double)">
            <summary>
            Scrolls the content to the specified horizontal offset position.
            </summary>
            <param name="offset">The target horizontal offset position.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            true if the item is (or is eligible to be) its own container; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.ClearContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.OnItemTapped(System.Object,C1.Xaml.C1TappedEventArgs)">
            <summary>
            Called when one of the items is tapped.
            </summary>
            <param name="sender">The item that was tapped.</param>
            <param name="e">The <see cref="T:C1.Xaml.C1TappedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.OnItemHolding(System.Object,C1.Xaml.C1TappedEventArgs)">
            <summary>
            Called when one of the items receive the Hold event.
            </summary>
            <param name="sender">The item that receive the hold event.</param>
            <param name="e">The <see cref="T:C1.Xaml.C1TappedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.OnDoubleTapped(Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.DoubleTap"/> event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.BringIntoView(Windows.Foundation.Rect,System.Boolean,System.Action)">
            <summary>
            Brings the into view the specified rectangle area.
            </summary>
            <param name="area">The area which will be brought into view.</param>
            <param name="changeZoomIfNecessary">If true, the zoom will be changed so that the whole area is visible.</param>
            <param name="completed">The action to be called after the operation is completed.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.BringIndexIntoView(System.Int32,System.Nullable{Windows.Foundation.Rect},System.Boolean,System.Action)">
            <summary>
            Brings the specified index into view.
            </summary>
            <param name="index">The index of the to bring into view.</param>
            <param name="subOffset">A sub area inside the item which can be used to scroll to a more specific point.</param>
            <param name="changeZoomIfNecessary">If true, the zoom will be changed so that the whole area is visible.</param>
            <param name="completed">Action called when the the animation completed.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.ZoomAnimation(System.Double,Windows.Foundation.Point,System.Action)">
            <summary>
            Call a zooms animation.
            </summary>
            <param name="targetZoom">The target zoom.</param>
            <param name="screenPoint">A screen point where the animation is anchored.</param>
            <param name="completed">Action called when the the animation completed.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ItemWidth">
            <summary>
            Gets or sets the width of each item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ItemWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.ItemWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ItemHeight">
            <summary>
            Gets or sets the height of each item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ItemHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.ItemHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.PreviewItemTemplate">
            <summary>
            Gets or sets the template used for previewing an item.
            </summary>
            <remarks>
            The use of preview item is due to performance reasons. 
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.PreviewItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.PreviewItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.Orientation">
            <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.RefreshWhileScrolling">
            <summary>
            Gets or sets a value indicating whether the viewport must be refreshed while the scroll is running.
            
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.RefreshWhileScrollingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.RefreshWhileScrolling"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ViewportGap">
            <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport. If zero is specified the size of the viewport will be equal to the scrollviewer viewport. If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ViewportGapProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.ViewportGap"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ViewportPreviewGap">
            <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
            <remarks>
            This coeficient must be greater to ViewportGap to take effect.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ViewportPreviewGapProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.ViewportPreviewGap"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.Zoom">
            <summary>
            Gets or set the zoom applied to this list.
            </summary>
            <remarks>
            The zoom will be conditioned to the MinZoom and MaxZoom properties in the following priority order MinZoom>MaxZoom>Zoom
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.Zoom"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.MinZoom">
            <summary>
            Gets or sets the minimum zoom available.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.MinZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.MinZoom"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.MaxZoom">
            <summary>
            Gets or sets the maximum zoom available.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.MaxZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.MaxZoom"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.ZoomMode">
            <summary>
            Gets or sets whether the zoom is enabled or disabled.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.ZoomMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewer.IsSwipeEnabled">
            <summary>
            Gets or sets a value that indicates whether the view supports discrete input processing for a swipe interaction.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewer.IsSwipeEnabledProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewer.IsSwipeEnabled"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ListViewer"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ListViewer"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1ListViewerItem">
            <summary>
            Visual element used inside a <see cref="T:C1.Xaml.C1ListViewer"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerItem.ChangeVisualStatePreview(System.Boolean)">
            <summary>
            Updates the current visual state of the Preview visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerItem.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerItem.State">
            <summary>
            Gets or sets the state of the item, which can be Preview or Full.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewerItem.StateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewerItem.State"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerItem.PreviewContent">
            <summary>
            Gets or sets the content of the preview state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewerItem.PreviewContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewerItem.PreviewContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerItem.PreviewContentTemplate">
            <summary>
            Gets or sets the DataTemplate used when in preview state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewerItem.PreviewContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewerItem.PreviewContentTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ListViewerItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ListViewerItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1ListViewerPanel">
            <summary>
            Virtualizing stack panel which supports preview templates in order to scroll quickly.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1ListViewerPanel"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.Owner">
            <summary>
            Gets the items control which is parent of this panel.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.GeneratorForPanel">
            <summary>
            Gets the items container generator for this panel.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.Zoom">
            <summary>
            Gets or sets the zoom applied in this panel.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ListViewerPanel.ZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ListViewerPanel.Zoom"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ItemWidth">
            <summary>
            Gets or sets the width of each item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ItemHeight">
            <summary>
            Gets or sets the height of each item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.Padding">
            <summary>
            Gets the padding of the list of items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.Orientation">
            <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ViewportGap">
            <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport. 
            If zero is specified the size of the viewport will be equal to the scrollviewer viewport. 
            If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ViewportPreviewGap">
            <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ScrollViewer">
            <summary>
            Gets the scroll viewer associated with this panel.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.MeasureSize">
            <summary>
            Gets the size used to measure the items in the MeasureOverride method call.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ListViewerPanel.ActualZoom">
            <summary>
            Gets the actual zoom.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.Refresh">
            <summary>
            Refreshes this instance by removing all the children and creating them again.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.Invalidate">
            <summary>
            Refreshes this instance without removing all the children.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.OnClearChildren">
            <summary>
            Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.AfterItemPrepared(C1.Xaml.C1ListViewerItem)">
            <summary>
            Called after the item was prepared to be shown in the panel.
            </summary>
            <param name="listBoxItem">The item container which was just prepared.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.BeforeItemRecycled(C1.Xaml.C1ListViewerItem)">
            <summary>
            Called before the item is recycled.
            </summary>
            <param name="listBoxItem">The item container to be recycled.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.AfterItemMeasure(System.Int32,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
            <param name="index">The index of the item which was measured.</param>
            <param name="child">The child that was measured.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.CalculateExtentSize">
            <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.NeedsMoreItems">
            <summary>
            Gets true when the viewport is close to the bottom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.GetItemsCountInViewport">
            <summary>
            Gets the number of items in viewport.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToRenderCoordinates(Windows.Foundation.Size)">
            <summary>
            Converts a size from absolute coordinates to render coordinates.
            </summary>
            <param name="size">The size to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToRenderCoordinates(Windows.Foundation.Point)">
            <summary>
            Converts a point from absolute coordinates to render coordinates.
            </summary>
            <param name="size">The point to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToRenderCoordinates(Windows.Foundation.Rect)">
            <summary>
            Converts a rectangle from absolute coordinates to render coordinates.
            </summary>
            <param name="rect">The rectangle to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToRenderCoordinates(System.Double)">
            <summary>
            Converts a length from absolute coordinates to render coordinates in order to implement zoom panel easily.
            </summary>
            <param name="length">The length to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToLayoutCoordinates(Windows.Foundation.Size)">
            <summary>
            Converts a size from absolute coordinates to layout coordinates.
            </summary>
            <param name="size">The size to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToLayoutCoordinates(Windows.Foundation.Point)">
            <summary>
            Converts a point from absolute coordinates to layout coordinates.
            </summary>
            <param name="size">The point to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Double)">
            <summary>
            Converts a length from absolute coordinates to layout coordinates.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertFromLayoutCoordinates(Windows.Foundation.Size)">
            <summary>
            Converts a length from layout coordinates to absolute coordinates.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertFromLayoutCoordinates(System.Double)">
            <summary>
            Converts a length from layout coordinates to absolute coordinates.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToAbsoluteCoordinates(Windows.Foundation.Size)">
            <summary>
            Converts a size from render coordinates to absolute coordinates.
            </summary>
            <param name="size">The size to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToAbsoluteCoordinates(Windows.Foundation.Rect)">
            <summary>
            Converts a rectangle from render coordinates to absolute coordinates.
            </summary>
            <param name="area">The rectangle to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToAbsoluteCoordinates(Windows.Foundation.Point)">
            <summary>
            Converts a point from render coordinates to absolute coordinates.
            </summary>
            <param name="point">The point to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Double)">
            <summary>
            Converts a length from render coordinates to absolute coordinates in order to implement zoom panel easily.
            </summary>
            <param name="length">The length to be converted.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.GetIndexAt(Windows.Foundation.Point)">
            <summary>
            Gets the item index at the specified position.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.CalculateItemsInViewport(Windows.Foundation.Rect,System.Int32@,System.Int32@)">
            <summary>
            Calculates the items that are in the viewport in order to virtualize and recycle unused items.
            </summary>
            <param name="viewport">The viewport dimensions in layout coordinates.</param>
            <param name="firstIndex">Index of the first visible item.</param>
            <param name="lastIndex">Index of the last visible item.</param>
        </member>
        <member name="M:C1.Xaml.C1ListViewerPanel.GetItemPosition(System.Int32)">
            <summary>
            Gets the estimated position of an item in this panel.
            </summary>
            <param name="index">The index of the item to be queried.</param>
        </member>
        <member name="E:C1.Xaml.C1ListViewerViewport.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ListViewerViewport.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed vent.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="T:C1.Xaml.C1Menu">
            <summary>
            The C1Menu control enables you hierarchically organize elements associated with event handlers.
            </summary>	
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemClick">
            <summary>
            Occurs when a C1MenuItem is clicked.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemOpening">
            <summary>
            Occurs when a C1MenuItem is opening.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemOpened">
            <summary>
            Occurs when a C1MenuItem is opened.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemClosing">
            <summary>
            Occurs when a C1MenuItem is closing.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemClosed">
            <summary>
            Occurs when a C1MenuItem is closed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemChecked">
            <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.ItemUnchecked">
            <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.AutoClosing">
            <summary>
            Occurs when the Menu is AutoClosing.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Menu.AutoClosed">
            <summary>
            Occurs when the Menu is AutoClosed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClick"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemOpening(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpening"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemOpened(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpened"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemClosing(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosing"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemClosed(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosed"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemChecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemChecked"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnItemUnchecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemUnchecked"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.Close">
            <summary>
            Forces closing all opened sub-menus.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnAutoCloseChanged(System.Boolean)">
            <summary>
            Called when the property AutoClose changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnAutoClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the AutoClosing event.
            </summary>
            <param name="e">Provides data for CancelEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnAutoClosed(System.EventArgs)">
            <summary>
            Raises the AutoClosed event.
            </summary>
            <param name="e">Provides data for EventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1Menu.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.MenuOpenDelay">
            <summary>
            Gets or Sets a value (in milliseconds) for the delay used when opening a submenu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.MenuOpenDelayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.MenuOpenDelay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.AutoClose">
            <summary>
            Gets or sets a value indicating if the menu will auto close when the user clicks outside of it.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.AutoCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.AutoClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.DetectBoundaries">
            <summary>
            Gets or sets a value indicating if the menu will auto update the position of its sub-menus when they are close to the boundaries of the application.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.DetectBoundariesProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.DetectBoundaries"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.Orientation">
            <summary>
            Gets or sets the direction in which to render the Menu control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.SubMenuMaxHeight">
            <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.SubMenuMaxHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.SubMenuMaxHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.SeparatorStyle">
            <summary>
            Default style applied to the <see cref="T:C1.Xaml.C1Separator"/> located inside this <see cref="T:C1.Xaml.C1Menu"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.SeparatorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.SeparatorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.FirstLevelStyle">
            <summary>
            Represents the style to apply to all menu items at the first level.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.FirstLevelStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.FirstLevelStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.NonFirstLevelStyle">
            <summary>
            Represents the style to apply to all menu items that are not in the first level.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.NonFirstLevelStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.NonFirstLevelStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.HighlightedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the menu item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.HighlightedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.HighlightedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Menu.OpenedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Menu.OpenedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Menu.OpenedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Menu.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1Menu"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Menu.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1Menu"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1MenuItem">
            <summary>
            Represents a selectable item inside a C1Menu control.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1MenuItem.ParentItem">
            <summary>
            Gets the <see cref="T:C1.Xaml.C1MenuItem"/> that is the parent of this item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.Parent">
            <summary>
            Gets the <see cref="T:C1.Xaml.C1MenuItem"/> that is the parent of this item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Silverlight.C1Menu" /> of this item.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.Click">
            <summary>
            Occurs when the <see cref="T:C1.Xaml.C1MenuItem"/> is clicked. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.SubmenuOpened">
            <summary>
            Occurs when the state of the IsSubmenuOpen property changes to true.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.SubmenuClosed">
            <summary>
            Occurs when the state of the IsSubmenuOpen property changes to false.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.SubmenuOpening">
            <summary>
            Occurs when a submenu is opening.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.SubmenuClosing">
            <summary>
            Occurs when a submenu is closing.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.Checked">
            <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1MenuItem.Unchecked">
            <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnSubmenuOpened(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to an open item action by raising a SubmenuOpened event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnSubmenuClosed(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a closed item action by raising a SubmenuClosed event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a click action by raising a Click event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnSubmenuClosing(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Responds to a close item action by raising a SubmenuClosing event.
            </summary>
            <param name="e">Provides data for CancelSourceEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnSubmenuOpening(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Responds to an open item action by raising a SubmenuOpening event.
            </summary>
            <param name="e">Provides data for CancelSourceEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnChecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a check item action by raising a Checked event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnUnchecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to an uncheck item action by raising a Unchecked event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnPointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary> 
            Called when the mouse pointer enters the bounds of the header element.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnPointerExited(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called when the mouse pointer leaves the bounds of the header element.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnRightTapped(Windows.UI.Xaml.Input.RightTappedRoutedEventArgs)">
            <summary>
            Called before the System.Windows.UIElement.MouseRightButtonDown event occurs.
            </summary>
            <param name="e">
            A System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnPointerTapped(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
            Called when the user clicks the item. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.Index">
            <summary>
            Gets the index of this <see cref="T:C1.Silverlight.C1MenuItem" /> in its parent items collection.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.ChangeVisualStateOpened(System.Boolean)">
            <summary>
            Updates the current visual state of the Opened visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.ChangeVisualStateHighlighted(System.Boolean)">
            <summary>
            Updates the current visual state of the Highlighted visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.TextWrapping">
            <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.TextWrapping"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a C1MenuItem.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IconProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.Icon"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.IsSubmenuOpen">
            <summary>
            Gets a value that indicates whether the submenu of the C1MenuItem is open.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IsSubmenuOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.IsSubmenuOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.IsSubmenuOpenVisual">
            <summary>
            Gets a value that indicates whether the submenu of the <see cref="T:C1.Silverlight.C1MenuItem" /> is open, this is used for visual purposes only.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IsSubmenuOpenVisualProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.IsSubmenuOpenVisual"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.IsCheckable">
            <summary>
            Gets a value that indicates whether a <see cref="T:C1.Silverlight.C1MenuItem" /> can be checked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IsCheckableProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.IsCheckable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.IsChecked">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:C1.Silverlight.C1MenuItem" /> is checked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.IsChecked"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.IsHighlighted">
            <summary>
            Gets a value that indicates whether a <see cref="T:C1.Silverlight.C1MenuItem" /> is highlighted.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.IsHighlightedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.IsHighlighted"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.GroupName">
            <summary>
            Gets or sets the name that specifies which MenuItems are mutually exclusive (when checkable).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.GroupNameProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.GroupName"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.SubMenuMaxHeight">
            <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.SubMenuMaxHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.SubMenuMaxHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.Command">
            <summary>
            Gets or sets the command to invoke when this button is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.Command"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.CommandParameter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.HighlightedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the menu item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.HighlightedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.HighlightedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.OpenedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.OpenedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.OpenedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.HeaderBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.HeaderBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.HeaderBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuItem.HeaderForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuItem.HeaderForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuItem.HeaderForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1MenuItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1MenuItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1MenuList">
            <summary>
            List of menu items. This list can be set as the content of a dropdown to make a drop down list.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuList.HighlightedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the menu item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuList.HighlightedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuList.HighlightedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1MenuList.OpenedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1MenuList.OpenedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1MenuList.OpenedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1MenuList"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1MenuList.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="T:C1.Xaml.IOrderedSet`1">
            <summary>
            Defines methods to manipulate ordered sets.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="P:C1.Xaml.IOrderedSet`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:C1.Xaml.IOrderedSet`1.AddRange(`0,`0)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.Xaml.IOrderedSet`1.RemoveRange(`0,`0)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.C1OrderedSet">
            <summary>
            Collection of ordered <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1OrderedSet"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.#ctor(C1.Xaml.C1OrderedSet)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1OrderedSet"/> class.
            </summary>
            <param name="set">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="P:C1.Xaml.C1OrderedSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Add(System.Int32)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Add(C1.Xaml.C1OrderedSet)">
            <summary>
            Joins the specified set.
            </summary>
            <param name="set">The set to join.</param>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:C1.Xaml.C1OrderedSet.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:C1.Xaml.C1OrderedSet.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Remove(C1.Xaml.C1OrderedSet)">
            <summary>
            Removes the specified items.
            </summary>
            <param name="removedItems">The removed items.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.Coalesce">
            <summary>
            Coalesces the ranges.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1OrderedSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:C1.Xaml.C1SelectionMode">
            <summary>
            Defines the selection behavior for a control which supports the SelectionMode
            property like C1treeView. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SelectionMode.None">
            <summary>
            The user can not select any item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SelectionMode.Single">
            <summary>
            The user can select only one item at a time. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SelectionMode.Multiple">
            <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SelectionMode.Extended">
            <summary>
            The user can select multiple consecutive items while holding down the corresponding modifier key.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1Separator">
            <summary>
            Control that is used to separate items in menus and toolbar.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1Separator.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Separator.FirstLevelTemplate">
            <summary>
            Represents the template to apply to all separator items used in the first level of the menu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Separator.FirstLevelTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Separator.FirstLevelTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Separator.Orientation">
            <summary>
            Gets or sets the direction of the separator.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Separator.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Separator.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Separator.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Separator.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Separator.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1Separator.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1Separator.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1Separator.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1Separator.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Separator.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1Separator"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Separator.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1Separator"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TileListBox">
            <summary>
            List of items displayed in columns determined by the size of the items.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TileListBox.InitializeScrollViewerPart">
            <summary>
            Initializes the scroll viewer part.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TileListBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TileListBox"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TileListBoxPanel">
            <summary>
            Virtualizing panel which render the items in columns depending on the size of the items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TileListBoxPanel.VisibleColumnsCount">
            <summary>
            Gets the number of visible columns or rows depending on the <see cref="T:Windows.UI.Xaml.Controls.Orientation"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.GetIndexAt(Windows.Foundation.Point)">
            <summary>
            Gets the item index at the specified position.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.GetItemPosition(System.Int32)">
            <summary>
            Gets the estimated position of an item in this panel.
            </summary>
            <param name="index">The index of the item to be queried.</param>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.CalculateExtentSize">
            <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.AfterItemMeasure(System.Int32,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
            <param name="index">The index of the item which was measured.</param>
            <param name="child">The child that was measured.</param>
        </member>
        <member name="M:C1.Xaml.C1TileListBoxPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="T:C1.Xaml.ExpandMode">
            <summary>
            The ExpandMode enumeration is used in C1TreeView to specify the allowed number of expanded C1TreeViewItems. 
            </summary>
        </member>
        <member name="F:C1.Xaml.ExpandMode.Single">
            <summary>
            Only one item can be expanded at a time.
            </summary>
        </member>
        <member name="F:C1.Xaml.ExpandMode.Multiple">
            <summary>
            Several items may be expanded simultaneously.
            </summary>
        </member>
        <member name="T:C1.Xaml.AutoScrollMode">
            <summary>
            The ExpandMode enumeration is used in C1TreeView to specify the allowed number of expanded C1TreeViewItems. 
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoScrollMode.Vertical">
            <summary>
            Auto-scrolls vertically.
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoScrollMode.Both">
            <summary>
            Auto-scrolls vertically and horizontally.
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoScrollMode.None">
            <summary>
            Does not Auto-scroll.
            </summary>
        </member>
        <member name="T:C1.Xaml.AutoSearchBufferChangedEventArgs">
            <summary>
            Provide data for the AutoSearchBufferChanged event.
            </summary>
        </member>
        <member name="P:C1.Xaml.AutoSearchBufferChangedEventArgs.Indexes">
            <summary>
            The collection of indexes.
            </summary>
        </member>
        <member name="P:C1.Xaml.AutoSearchBufferChangedEventArgs.SearchBuffer">
            <summary>
            Get the value of searching buffer.
            </summary>
        </member>
        <member name="T:C1.Xaml.SelectionChangingEventArgs">
            <summary>
            Provide data for the SelectionChanging event.
            </summary>
        </member>
        <member name="P:C1.Xaml.SelectionChangingEventArgs.Cancel">
            <summary>
             Cancel the Selection operation.
            </summary>
        </member>
        <member name="T:C1.Xaml.DropAction">
            <summary>
            Specifies the action that will be performed when the user drops a drag source into a drop target element.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropAction.Move">
            <summary>
            Move the source element into the target element.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropAction.Copy">
            <summary>
            Copy the source element into the target element.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TreeViewLine">
            <summary>
            Vertical connecting line.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLine.Stroke">
            <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLine.StrokeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLine.Stroke"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLine.StrokeThickness">
            <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLine.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLine.StrokeThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLine.StrokeDashArray">
            <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLine.StrokeDashArrayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLine.StrokeDashArray"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TreeViewLine.StrokeDashArrayChanged">
            <summary> 
            Event raised when the <see cref="P:StrokeDashArray"/> property has changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewLine.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TreeViewLine"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewLine.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TreeViewLine"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TreeViewLinePanel">
            <summary>
            A Panel which contains the vertical lines.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLinePanel.LineStroke">
            <summary>
            Gets or sets the brush used to paint the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLinePanel.LineStrokeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLinePanel.LineStroke"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLinePanel.LineThickness">
            <summary>
            Gets or sets the thickness of the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLinePanel.LineThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLinePanel.LineThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLinePanel.LineDashArray">
            <summary>
            Gets or sets a Collection of System.Double values that indicates the pattern of dashes and gaps that is used to the connecting lines.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLinePanel.LineDashArrayProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLinePanel.LineDashArray"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TreeViewLinePanel.LineStyle">
            <summary>
            Gets or sets a Style of the lines in C1TreeViewLinePanel .
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TreeViewLinePanel.LineStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TreeViewLinePanel.LineStyle"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewLinePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TreeViewLinePanel"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TreeViewExpandButton">
            <summary>
            Expand/Co
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewExpandButton.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TreeViewExpandButton"/> control when a new template is applied.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TreeViewExpandButton.ChangeVisualStateShowIcon(System.Boolean)">
            <summary>
            Updates the current visual state of the ShowIcons visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1VirtualizingPanel.Owner">
            <summary>
            Gets the items control which is parent of this panel.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1VirtualizingPanel.OnItemsChanged(System.Object,C1.Xaml.C1ItemsChangedEventArgs)">
            <summary>
            Called when the <see cref="P:C1ItemsControl.Items"/> collection that is associated with the <see cref="T:C1ItemsControl"/> for this <see cref="T:C1VirtualizingPanel"/> changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:C1.Xaml.C1ItemsChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:C1.Xaml.C1ItemsChangedEventArgs.Action">
            <summary>
            Gets the action that occurred on the items collection.
            </summary>
            <value>
            Returns the action that occurred.
            </value>
        </member>
        <member name="P:C1.Xaml.C1ItemsChangedEventArgs.ItemCount">
            <summary>
            ets the number of items that were involved in the change.
            </summary>
            <value>
            Integer that represents the number of items involved in the change.
            </value>
        </member>
        <member name="P:C1.Xaml.C1ItemsChangedEventArgs.ItemUICount">
            <summary>
            Gets the number of UI elements involved in the change.
            </summary>
            <value>
            Integer that represents the number of elements involved in the change.
            </value>
        </member>
        <member name="P:C1.Xaml.C1ItemsChangedEventArgs.OldPosition">
            <summary>
            Gets the position in the collection before the change occurred.
            </summary>
            <value>
            Returns a GeneratorPosition.
            </value>
        </member>
        <member name="P:C1.Xaml.C1ItemsChangedEventArgs.Position">
            <summary>
            Gets the position in the collection where the change occurred.
            </summary>
            <value>
            Returns a GeneratorPosition.
            </value>
        </member>
        <member name="T:C1.Xaml.C1ZoomUnit">
            <summary>
            Represent a zoom which can be expresed like a fixed value, or relative to the viewport.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1ZoomUnit"/> struct.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.#ctor(System.Double,C1.Xaml.C1ZoomUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1ZoomUnit"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type of unit used to express the zoom.</param>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.Type">
            <summary>
            Gets the type of unit.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.IsFixed">
            <summary>
            Gets a value indicating whether the zoom is a fixed value.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.IsFill">
            <summary>
            Gets a value indicating whether the zoom will be adjusted to fill the viewport.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.IsOneItem">
            <summary>
            Gets a value indicating whether the zoom will be adjusted to show one item entirely.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.Fill">
            <summary>
            Gets the zoom which auto-adjust to fill the viewport.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ZoomUnit.OneItem">
            <summary>
            Gets the zoom which auto-adjust to show one item entirely in the viewport.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.op_Equality(C1.Xaml.C1ZoomUnit,C1.Xaml.C1ZoomUnit)">
            <summary>
            Compares two C1ZoomUnit structures for equality.
            </summary>
            <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
            <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
            <returns>true if the two instances of C1ZoomUnit have the same value and C1ZoomUnitType; otherwise, false.</returns>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.op_Inequality(C1.Xaml.C1ZoomUnit,C1.Xaml.C1ZoomUnit)">
            <summary>
            Compares two C1ZoomUnit structures to determine if they are not equal.
            </summary>
            <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
            <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
            <returns>true if the two instances of C1ZoomUnit do not have the same value and C1ZoomUnitType; otherwise, false.</returns>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Xaml.C1ZoomUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:C1.Xaml.C1ZoomUnitType">
            <summary>
            Represent the kind of zoom.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ZoomUnitType.Fixed">
            <summary>
            Represent a zoom determined by a fixed value, where 1 means no zoom.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ZoomUnitType.Fill">
            <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to fill the viewport.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ZoomUnitType.OneItem">
            <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to show one item entirely.
            </summary>
        </member>
        <member name="T:C1.Xaml.Range`1">
            <summary>
            Represents a range of items.
            </summary>
            <typeparam name="T">The range type.</typeparam>
        </member>
        <member name="M:C1.Xaml.Range`1.#ctor(`0,`0)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
        </member>
        <member name="P:C1.Xaml.Range`1.LowerBound">
            <summary>
            The start of the range.
            </summary>
        </member>
        <member name="P:C1.Xaml.Range`1.UpperBound">
            <summary>
            The upper bound of the range.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.Contains(`0)">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>true if the range contains <code>value</code>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Contains(C1.Xaml.Range{`0})">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.IsContainedBy(C1.Xaml.Range{`0})">
            <summary>
            Indicates if the range is contained by <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range is within <code>value</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Overlaps(C1.Xaml.Range{`0})">
            <summary>
            Indicates if the range overlaps <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if any of the range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Intersect(C1.Xaml.Range{`0})">
            <summary>
            Returns the range that represents the intersection of this range and <code>value</code>.
            </summary>
            <param name="value">The range to intersect with.</param>
            <returns>A range that contains the values that are common in both ranges, or null if there is no intersection.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> does not overlap the range.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Union(C1.Xaml.Range{`0})">
            <summary>
            Returns the range that represents the union of this range and <code>value</code>.
            </summary>
            <param name="value">The range to union with.</param>
            <returns>A range that contains both ranges, or null if there is no union.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> is not contiguous with the range.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Complement(C1.Xaml.Range{`0})">
            <summary>
            Returns a range which contains the current range, minus <code>value</code>.
            </summary>
            <param name="value">The value to complement the range by.</param>
            <returns>The complemented range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <code>value</code> is contained by this range, complementing would lead to a split range.
            </exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Substract(C1.Xaml.Range{`0},System.Func{`0,`0},System.Func{`0,`0})">
            <summary>
            Returns the result of subtracting a range to the current one. This could lead to a split range
            in case the one that is being subtracted is contained in the current one.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.Split(`0)">
            <summary>
            Splits the range into two.
            </summary>
            <param name="position">The position to split the range at.</param>
            <returns>The split ranges.</returns>
            <exception cref="T:System.ArgumentNullException"><code>position</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>position</code> is not contained within the range.</exception>
        </member>
        <member name="M:C1.Xaml.Range`1.Iterate(System.Func{`0,`0})">
            <summary>
            Iterates the range.
            </summary>
            <param name="incrementor">A function which takes a value, and returns the next value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.ReverseIterate(System.Func{`0,`0})">
            <summary>
            Iterates the range in reverse.
            </summary>
            <param name="decrementor">A function which takes a value, and returns the previous value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.IsContiguousWith(C1.Xaml.Range{`0})">
            <summary>
            Indicates if this range is contiguous with <code>range</code>.
            </summary>
            <param name="range">The range to check.</param>
            <returns>true if the two ranges are contiguous, false otherwise.</returns>
            <remarks>Contiguous can mean containing, overlapping, or being next to.</remarks>
        </member>
        <member name="M:C1.Xaml.Range`1.ToString">
            <summary>
            See <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.op_Equality(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_Inequality(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the not equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
            <summary>
            Overrides the equals operator.
            </summary>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_GreaterThan(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_LessThan(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_GreaterThan(C1.Xaml.Range{`0},`0)">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_LessThan(C1.Xaml.Range{`0},`0)">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_GreaterThanOrEqual(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the greater than or equal operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_LessThanOrEqual(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            Overrides the less than or equal to operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_GreaterThanOrEqual(C1.Xaml.Range{`0},`0)">
            <summary>
            Overrides the greater than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_LessThanOrEqual(C1.Xaml.Range{`0},`0)">
            <summary>
            Overrides the less than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_ExclusiveOr(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            The complement operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The complement of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_BitwiseOr(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            The union operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The union of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.op_BitwiseAnd(C1.Xaml.Range{`0},C1.Xaml.Range{`0})">
            <summary>
            The intersection operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The intersection of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Xaml.Range`1.CompareTo(C1.Xaml.Range{`0})">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.CompareTo(`0)">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.Range`1.CompareTo(System.Object)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.Range`2">
            <summary>
            Represents a range of items, with an associated value.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:C1.Xaml.Range`2.#ctor(`0,`0,`1)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:C1.Xaml.Range`2.Value">
            <summary>
            The value for the range.
            </summary>
        </member>
        <member name="T:C1.Xaml.RangeArray`1">
            <summary>
            Represents a range of array items, with an associated value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:C1.Xaml.RangeArray`1.#ctor(System.Int32,`0[])">
            <summary>
            Creates the range.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:C1.Xaml.RangeArray`1.Values">
            <summary>
            The values for the range.
            </summary>
        </member>
        <member name="T:C1.Xaml.RangeAssert">
            <summary>
            Provides access to assertion functions.
            </summary>
        </member>
        <member name="M:C1.Xaml.RangeAssert.IsFalse(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is fase.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is true.</exception>
        </member>
        <member name="M:C1.Xaml.RangeAssert.IsTrue(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is true.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is false.</exception>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotNull(System.String,System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="paramName">The name of the parameter to RangeAssert.</param>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotNull(System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty(System.String,System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty(System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty(System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty``1(``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="values">The values to test.</param>
        </member>
        <member name="M:C1.Xaml.RangeAssert.NotEmpty``1(System.String,``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="values">The values to test.</param>
        </member>
        <member name="T:C1.Xaml.SelectionChangedEventArgs`1">
            <summary>
            Provides data for the SelectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Xaml.SelectionChangedEventArgs`1.#ctor(C1.Xaml.IOrderedSet{`0},C1.Xaml.IOrderedSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.SelectionChangedEventArgs`1"/> class.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
        </member>
        <member name="P:C1.Xaml.SelectionChangedEventArgs`1.AddedItems">
            <summary>
            Gets a collection which contains the items that were selected.
            </summary>
            <value>The items that were selected in this event.</value>
        </member>
        <member name="P:C1.Xaml.SelectionChangedEventArgs`1.RemovedItems">
            <summary>
            Gets a collection which contains the items that were unselected.
            </summary>
            <value>The items that were unselected in this event.</value>
        </member>
        <member name="T:C1.Xaml.BreakLine">
            <summary>
            Specifies hard line breaks before and/or after elements in a <see cref="T:C1.Xaml.C1WrapPanel" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.BreakLine.None">
            <summary>
            No hard breaks. The next element will be positioned in the same line if there is enough room.
            </summary>
        </member>
        <member name="F:C1.Xaml.BreakLine.After">
            <summary>
            Add a hard break after this element. The next element will be positioned in the next line.
            </summary>
        </member>
        <member name="F:C1.Xaml.BreakLine.Before">
            <summary>
            Add a hard break before this element.
            </summary>
        </member>
        <member name="F:C1.Xaml.BreakLine.AfterAndBefore">
            <summary>
            Add hard breaks before and after this element. It will be positioned by itself on a line.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DockPanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally or vertically, relative to each other.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child of the panel fills the remaining space.
            </summary>
            <remarks>
            If this property is set to True, then the Dock property of the last child element will be ignored, and the panel will try to fill the empty space.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1DockPanel.LastChildFillProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DockPanel.LastChildFill"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DockPanel.GetDock(Windows.UI.Xaml.DependencyObject)">
            <summary> 
            Gets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the Dock property.</returns>
        </member>
        <member name="M:C1.Xaml.C1DockPanel.SetDock(Windows.UI.Xaml.DependencyObject,C1.Xaml.Dock)">
            <summary> 
            Sets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.Xaml.C1DockPanel.DockProperty">
            <summary> 
            Identifies the Dock attached property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DockPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1DockPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ExpandDirection">
            <summary>
            Specifies the direction in which a <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ExpandDirection.Down">
            <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens down. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ExpandDirection.Up">
            <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens up. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ExpandDirection.Left">
            <summary>
            The <see cref="T:C1.Silverlight.Extended.C1Expander" /> control opens left. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ExpandDirection.Right">
            <summary>
            The <see cref="!:C1Expander" /> control opens right.  
            </summary>
        </member>
        <member name="T:C1.Xaml.GridResizeBehavior">
            <summary>
            Specifies the rows or columns that are resized by the <see cref="T:C1.Xaml.C1GridSplitter"/> control.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeBehavior.BasedOnAlignment">
            <summary>
            Space is redistributed based on the value of the FrameworkElement.HorizontalAlignment and FrameworkElement.VerticalAlignment properties.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeBehavior.CurrentAndNext">
            <summary>
            For a horizontal <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed
            between the row that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/> and the next row that is below it. 
            For a vertical <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed between the column that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/>
            and the next column that is to the right.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeBehavior.PreviousAndCurrent">
            <summary>
            For a horizontal <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed
            between the row that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/> and the next row that is above it. 
            For a vertical <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed between the column that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/>
            and the next column that is to the left.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeBehavior.PreviousAndNext">
            <summary>
            For a horizontal <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed
            between the rows that are above and below the row that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/>. 
            For a vertical <see cref="T:C1.Xaml.C1GridSplitter"/>, space is redistributed between the columns that are to the left and right
            of the column that is specified for the <see cref="T:C1.Xaml.C1GridSplitter"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.GridResizeDirection">
            <summary>
            Specifies whether a <see cref="T:C1.Xaml.C1GridSplitter"/> control redistributes space between rows or between columns.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeDirection.Auto">
            <summary>
            Space is redistributed based on the values of the FrameworkElement.HorizontalAlignment, FrameworkElement.VerticalAlignment, 
            FrameworkElement.ActualWidth and FrameworkElement.ActualHeight properties of the <see cref="T:C1.Xaml.C1GridSplitter"/> control.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeDirection.Columns">
            <summary>
            Space is redistributed between columns.
            </summary>
        </member>
        <member name="F:C1.Xaml.GridResizeDirection.Rows">
            <summary>
            Space is redistributed between rows.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1GridSplitter">
            <summary>
            Represents the control that redistributes space between columns or rows of a <see cref="T:Windows.UI.Xaml.Controls.Grid"/> panel.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1GridSplitter.DraggingCompleted">
            <summary>
            Occurs when dragging completes.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1GridSplitter.ResizeBehaviorProperty">
            <summary>
            ResizeBehavior Dependency Property
            </summary>
        </member>
        <member name="P:C1.Xaml.C1GridSplitter.ResizeBehavior">
            <summary>
            Gets or sets the ResizeBehavior property. This dependency property 
            indicates which columns or rows are resized relative
            to the column or row for which the GridSplitter control is defined.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1GridSplitter.ResizeDirectionProperty">
            <summary>
            ResizeDirection Dependency Property
            </summary>
        </member>
        <member name="P:C1.Xaml.C1GridSplitter.ResizeDirection">
            <summary>
            Gets or sets the ResizeDirection property. This dependency property 
            indicates whether the C1GridSplitter control resizes rows or columns.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1GridSplitter.OnResizeDirectionChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ResizeDirection property.
            </summary>
            <param name="d">
            The <see cref="T:Windows.UI.Xaml.DependencyObject"/> on which
            the property has changed value.
            </param>
            <param name="e">
            Event data that is issued by any event that
            tracks changes to the effective value of this property.
            </param>
        </member>
        <member name="M:C1.Xaml.C1GridSplitter.OnResizeDirectionChanged(C1.Xaml.GridResizeDirection,C1.Xaml.GridResizeDirection)">
            <summary>
            Provides derived classes an opportunity to handle changes
            to the ResizeDirection property.
            </summary>
            <param name="oldResizeDirection">The old ResizeDirection value</param>
            <param name="newResizeDirection">The new ResizeDirection value</param>
        </member>
        <member name="F:C1.Xaml.C1GridSplitter.KeyboardIncrementProperty">
            <summary>
            KeyboardIncrement Dependency Property
            </summary>
        </member>
        <member name="P:C1.Xaml.C1GridSplitter.KeyboardIncrement">
            <summary>
            Gets or sets the KeyboardIncrement property. This dependency property 
            indicates the distance that each press of an arrow key moves
            a C1GridSplitter control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1GridSplitter.ShowsPreviewProperty">
            <summary>
            ShowsPreview Dependency Property
            </summary>
        </member>
        <member name="P:C1.Xaml.C1GridSplitter.ShowsPreview">
            <summary>
            Gets or sets the ShowsPreview property. This dependency property
            indicates whether the preview control should be shown when dragged
            instead of directly updating the grid.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1GridSplitter.PreviewStyleProperty">
            <summary>
            PreviewStyle Dependency Property
            </summary>
        </member>
        <member name="P:C1.Xaml.C1GridSplitter.PreviewStyle">
            <summary>
            Gets or sets the PreviewStyle property. This dependency property 
            indicates the style of the preview.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1GridSplitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1GridSplitter" /> class.
            </summary>
        </member>
        <member name="T:C1.Xaml.GridSplitterPreviewControl">
            <summary>
            A primitive control used for representing a preview of the manipulated C1GridSplitter
            </summary>
        </member>
        <member name="F:C1.Xaml.GridSplitterPreviewControl._orientation">
            <summary>
            Is Null until the PreviewControl is bound to a GridSplitter.
            </summary>
        </member>
        <member name="M:C1.Xaml.GridSplitterPreviewControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.GridSplitterPreviewControl" /> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.GridSplitterPreviewControl.OnApplyTemplate">
            <summary>
            Called when template should be applied to the control.
            </summary>
        </member>
        <member name="M:C1.Xaml.GridSplitterPreviewControl.Bind(C1.Xaml.C1GridSplitter)">
            <summary>
            Bind the the dimensions of the preview control to the associated
            grid splitter.
            </summary>
            <param name="gridSplitter">GridSplitter instance to target.</param>
        </member>
        <member name="T:C1.Xaml.C1HeaderedContentControl">
            <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HeaderedContentControl.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.Header">
            <summary>
            Gets or sets the header of this control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderFontFamily">
            <summary>
            Gets or sets the font family of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderFontFamilyProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderFontFamily"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderFontSize">
            <summary>
            Gets or sets the font size of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderFontSizeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderFontSize"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderFontStretch">
            <summary>
            Gets or sets the font stretch of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderFontStretchProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderFontStretch"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderFontStyle">
            <summary>
            Gets or sets the font style of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderFontStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderFontStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderFontWeight">
            <summary>
            Gets or sets the font weight of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderFontWeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderFontWeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderPadding">
            <summary>
            Gets or sets the padding of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderPaddingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderPadding"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HorizontalHeaderAlignment">
            <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HorizontalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HorizontalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.VerticalHeaderAlignment">
            <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.VerticalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.VerticalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.HeaderForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.HeaderForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.HeaderForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1HeaderedContentControl.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HeaderedContentControl.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1HeaderedContentControl.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1HeaderedContentControl.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1HeaderedContentControl"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1HeaderedContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1HeaderedContentControl"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1LayoutRounder">
            <summary>
            Wrapper to get layout rounding in WPF 3.5.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1LayoutRounder.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.ProcessTransform(Windows.UI.Xaml.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.GetTransformMatrix(Windows.UI.Xaml.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF parameter name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.ComputeLargestTransformedSize(Windows.Foundation.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.IsSizeSmallerOrClose(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.IsSizeSmaller(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.RoundMatrix(Windows.UI.Xaml.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.RectTransform(Windows.Foundation.Rect,Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.MatrixMultiply(Windows.UI.Xaml.Media.Matrix,Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.MatrixHasInverse(Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:C1.Xaml.C1LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1LayoutTransformer.LayoutTransform"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1LayoutTransformer"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1LayoutTransformer"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1ScrollViewer">
            <summary>
            Represents a scrollable area that can contain other visible elements. 
            </summary>	
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveUpCommand">
            <summary>
            Command to scroll up.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveDownCommand">
            <summary>
            Command to scroll down.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveRightCommand">
            <summary>
            Command to scroll right.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveLeftCommand">
            <summary>
            Command to scroll left.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveTopCommand">
            <summary>
            Command to scroll to the top.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveBottomCommand">
            <summary>
            Command to scroll to the bottom.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveRightEndCommand">
            <summary>
            Command to scroll totally to the right.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.MoveLeftEndCommand">
            <summary>
            Command to scroll totally to the left.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToVerticalOffset(System.Double)">
            <summary>
            Scrolls to vertical offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToHorizontalOffset(System.Double)">
            <summary>
            Scrolls to horizontal offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollUp">
            <summary>
            Scrolls the <see cref="T:C1.Xaml.C1ScrollViewer"/> content upward by <see cref="P:C1.Xaml.C1ScrollViewer.VerticalSmallChange"/> pixels.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollDown">
            <summary>
            Scrolls the <see cref="T:C1.Xaml.C1ScrollViewer"/> content downward by <see cref="P:C1.Xaml.C1ScrollViewer.VerticalSmallChange"/> pixels.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollRight">
            <summary>
            Scrolls the <see cref="T:C1.Xaml.C1ScrollViewer"/> content to the right by <see cref="P:C1.Xaml.C1ScrollViewer.HorizontalSmallChange"/> pixels.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollLeft">
            <summary>
            Scrolls the <see cref="T:C1.Xaml.C1ScrollViewer"/> content to the left by <see cref="P:C1.Xaml.C1ScrollViewer.HorizontalSmallChange"/> pixels.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToHome">
            <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToEnd">
            <summary>
            Scrolls vertically to the end of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToTop">
            <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToBottom">
            <summary>
            Scrolls vertically to the end of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToRightEnd">
            <summary>
            Scrolls horizontally to the end of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.ScrollToLeftEnd">
            <summary>
            Scrolls horizontally to the beginning of the <see cref="T:C1.Xaml.C1ScrollViewer"/> content.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ExtentHeight">
            <summary>
            Gets a value that contains the vertical size of the extent. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ExtentHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ExtentHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ExtentWidth">
            <summary>
            Gets a value that contains the horizontal size of the extent. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ExtentWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ExtentWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.HorizontalOffset">
            <summary>
            Gets a value that contains the horizontal offset of the scrolled content. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.HorizontalOffset"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ScrollableHeight">
            <summary>
            Gets a value that represents the vertical size of the content element that can be scrolled. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ScrollableHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ScrollableHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ScrollableWidth">
            <summary>
            Gets a value that represents the horizontal size of the content element that can be scrolled. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ScrollableWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ScrollableWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.VerticalOffset">
            <summary>
            Gets a value that contains the vertical offset of the scrolled content. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.VerticalOffset"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ViewportHeight">
            <summary>
            Gets a value that contains the vertical size of the content's viewport. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ViewportHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ViewportHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ViewportWidth">
            <summary>
            Gets a value that contains the horizontal size of the content's viewport. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ViewportWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ViewportWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.CanScrollUp">
            <summary>
            Gets a value that indicates whether the vertical scroll isn't in the top position. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.CanScrollUpProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.CanScrollUp"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.CanScrollRight">
            <summary>
            Gets a value that indicates whether the vertical scroll isn't in the right-most position. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.CanScrollRightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.CanScrollRight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.CanScrollLeft">
            <summary>
            Gets a value that indicates whether the vertical scroll isn't in the left-most position. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.CanScrollLeftProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.CanScrollLeft"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.CanScrollDown">
            <summary>
            Gets a value that indicates whether the vertical scroll isn't in the bottom position. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.CanScrollDownProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.CanScrollDown"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.HorizontalSmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the horizontal offset value when the scroll is moved.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.HorizontalSmallChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.HorizontalSmallChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.VerticalSmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the vertical offset value when the scroll is moved.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.VerticalSmallChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.VerticalSmallChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical commands should be displayed. This is a dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal commands should be displayed. This is a dependency property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ScrollViewer.ScrollMode">
            <summary>
            Specifies when the scroll event should be raised. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ScrollViewer.ScrollModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ScrollViewer.ScrollMode"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ScrollViewer"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ScrollViewer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ScrollViewer"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.OpacityConverter">
            <summary>
            Converter used to convert <see cref="T:System.Boolean"/> values into opacity values.
            true = 1, false = 0.
            </summary>
        </member>
        <member name="M:C1.Xaml.OpacityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:C1.Xaml.OpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:C1.Xaml.C1SlideContentControl">
            <summary>
            <see cref="T:Windows.UI.Xaml.Controls.ContentControl"/> which allows specifying a value between 0 and 1 to perform slide animations which affect the layout.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1SlideContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1SlideContentControl"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1SlideContentControl.SlideDirection">
            <summary>
            Gets or sets the expand direction.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SlideContentControl.SlideDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1SlideContentControl.SlideDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1SlideContentControl.Slide">
            <summary>
            Gets or sets a value between 0 and 1 which determine the visible percentage of the control, 
            a value of 0 means the content is not visible wheras 1 is completely visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1SlideContentControl.SlideProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1SlideContentControl.Slide"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1SlideContentControl.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:C1.Xaml.C1SlideContentControl.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="T:C1.Xaml.C1UniformGrid">
            <summary>
            Provides a way to arrange content in a grid where all the cells in the grid have the same size.
            </summary>	
        </member>
        <member name="T:C1.Xaml.C1UniformGrid.IntTuple">
            <summary>
            A structure that groups two integer values.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1UniformGrid.Columns">
            <summary>
            Gets or sets the number of columns for this panel.
            </summary>
            <remarks>
            The default value (0) specifies that the column count is computed based on the number of rows and the number of visible child elements.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1UniformGrid.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1UniformGrid.Columns"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1UniformGrid.Rows">
            <summary>
            Gets or sets the number of rows for this panel.
            </summary>
            <remarks>
            The default value (0) specifies that the row count is computed based on the number of columns and the number of visible child elements.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1UniformGrid.RowsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1UniformGrid.Rows"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1UniformGrid.FirstColumn">
            <summary>
            Gets or sets the number of leading blank cells in the first row of the grid.
            </summary>
            <remarks>
            The default value is 0. The value of the FirstColumn must be less than the value of the Columns property to work correctly.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1UniformGrid.FirstColumnProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1UniformGrid.FirstColumn"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1UniformGrid.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1UniformGrid"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1WrapPanel">
            <summary>
            Positions child elements sequentially from top to bottom or from right to left, depending on the value of the <see cref="P:C1.Xaml.C1WrapPanel.Orientation" /> property.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1WrapPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1WrapPanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1WrapPanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1WrapPanel.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1WrapPanel.ItemWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1WrapPanel.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1WrapPanel.ItemHeight"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1WrapPanel.GetBreakLine(Windows.UI.Xaml.DependencyObject)">
            <summary> 
            Gets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the BreakLine property.</returns>
        </member>
        <member name="M:C1.Xaml.C1WrapPanel.SetBreakLine(Windows.UI.Xaml.DependencyObject,C1.Xaml.BreakLine)">
            <summary> 
            Sets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.Xaml.C1WrapPanel.BreakLineProperty">
            <summary> 
            Identifies the BreakLine attached property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1WrapPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1WrapPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.Dock">
            <summary>
            Specifies how controls are sized and aligned within <see cref="T:C1.Silverlight.C1DockPanel" /> controls.
            </summary>
        </member>
        <member name="F:C1.Xaml.Dock.Left">
            <summary>
            The control's left edge is docked to the left edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Xaml.Dock.Right">
            <summary>
            The control's right edge is docked to the right edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Xaml.Dock.Top">
            <summary>
            The control's top edge is docked to the top of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Xaml.Dock.Bottom">
            <summary>
            The control's bottom edge is docked to the bottom of its containing control. 
            </summary>
        </member>
        <member name="T:C1.Xaml.DockExtensions">
            <summary>
            Provides exntesions methods for <see cref="T:C1.Xaml.Dock"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.DockExtensions.GetOrientation(C1.Xaml.Dock)">
            <summary>
            Gets the orientation.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.DockExtensions.GetOpposite(C1.Xaml.Dock)">
            <summary>
            Gets the opposite.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.C1NagScreen">
            <summary>
            Dialog shown when unlicensed products are used (evaluation dialog).
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NagScreen.GetNag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Getter of the Nag attached property for runtime nagging.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1NagScreen.SetNag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Setter of the Nag attached property for runtime nagging.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1NagScreen.NagProperty">
            <summary>
            Attached property set at design time to enable runtime nagging about unlicensed copy.
            </summary>
        </member>
        <member name="T:C1.Xaml.Anchor">
            <summary>
            Specifies an anchor point in a visual element.
            </summary>
        </member>
        <member name="F:C1.Xaml.Anchor.TopLeft">
            <summary>
            The top left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.Xaml.Anchor.TopRight">
            <summary>
            The top right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.Xaml.Anchor.BottomLeft">
            <summary>
            The bottom left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.Xaml.Anchor.BottomRight">
            <summary>
            The bottom right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.Xaml.Anchor.Center">
            <summary>
            The center of the visual element.
            </summary>
        </member>
        <member name="T:C1.Xaml.AnchorMatching">
            <summary>
            Specifies an anchor matching between two elements.
            </summary>
        </member>
        <member name="P:C1.Xaml.AnchorMatching.FixedElementAnchor">
            <summary>
            Anchor of the fixed element.
            </summary>
        </member>
        <member name="P:C1.Xaml.AnchorMatching.MoveableElementAnchor">
            <summary>
            Anchor of the element that will be located.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DropDown">
            <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1DropDown.ShowButton">
            <summary>
            Gets/sets if the a<see cref="T:Windows.UI.Xaml.Controls.Primitives.ToggleButton" /> is shown.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDown.ShowButtonProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDown.ShowButton"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDown.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDown.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDown.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDown.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDown.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDown.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDown.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1DropDown"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1DropDown"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1DropDownButton">
            <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.GetPreferedLocations">
            <summary>
            Get the locations where the dropdown will try to locate the <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/> once it's opened.
            </summary>
            <returns>Ordered list of <see cref="T:C1.Xaml.AnchorMatching"/> to try.</returns>
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.ChangeVisualStateDropDownOpen(System.Boolean)">
            <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.IsDropDownOpen">
            <summary>
            Open or close the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.IsDropDownOpen"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DropDownButton.IsDropDownOpenChanged">
            <summary> 
            Event raised when the <see cref="P:IsDropDownOpen"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.DropDownHeight">
            <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.DropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.DropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.DropDownWidth">
            <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.DropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.DropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.MaxDropDownHeight">
            <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.MaxDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.MaxDropDownWidth">
            <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.MaxDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.MaxDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.MinDropDownHeight">
            <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.MinDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.MinDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.MinDropDownWidth">
            <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.MinDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.MinDropDownWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.DropDownDirection">
            <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.DropDownDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.DropDownDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.AutoClose">
            <summary>
            Auto closes the dropdown when the user clicks outside it.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.AutoCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.AutoClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.AutoSizeMode">
            <summary>
            Gets or sets how the content of the poup will be resized as the content size changes.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.AutoSizeModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.AutoSizeMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1DropDownButton.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Xaml.C1ValidationDecorator" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DropDownButton.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1DropDownButton.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1DropDownButton.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1DropDownButton"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1DropDownButton.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1DropDownButton"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.PrepareDropDownEventArgs">
            <summary>
            Argument of the event fired before the drop-down box is opened.
            </summary>
        </member>
        <member name="P:C1.Xaml.PrepareDropDownEventArgs.DropDownWidth">
            <summary>
            Width of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
        </member>
        <member name="P:C1.Xaml.PrepareDropDownEventArgs.DropDownHeight">
            <summary>
            Height of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1RelativePopup">
            <summary>
            Popup that will be placed relative to another element
            </summary>
        </member>
        <member name="T:C1.Xaml.AutoSizeMode">
            <summary>
            Determines how the popup will be resized when the content changes its size.
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoSizeMode.GrowAndShrink">
            <summary>
            Change its size according to the content size
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoSizeMode.GrowOnly">
            <summary>
            Grows its size when the content is bigger but remains unchanged when the content size is smaller. 
            </summary>
        </member>
        <member name="F:C1.Xaml.AutoSizeMode.GrowHorizontally">
            <summary>
            Grows its size horizontally, but it shrink its size vertically if needed.
            </summary>
        </member>
        <member name="T:C1.Xaml.DropDownDirection">
            <summary>
            Provides the supported expand directions for the <see cref="T:C1.Xaml.C1ComboBox" />.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropDownDirection.BelowOrAbove">
            <summary>
            Tries to open the drop-down <see cref="T:C1.Xaml.C1ComboBox" /> below the header.
            If it is not possible tries to open above it.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropDownDirection.AboveOrBelow">
            <summary>
            Tries to open the drop-down <see cref="T:C1.Xaml.C1ComboBox" /> above the header.
            If it is not possible tries to open below it.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropDownDirection.ForceBelow">
            <summary>
            Forces the drop-down <see cref="T:C1.Xaml.C1ComboBox" /> to open below the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.DropDownDirection.ForceAbove">
            <summary>
            Forces the <see cref="T:C1.Xaml.C1ComboBox"/> content to open above the header.
            </summary>
        </member>
        <member name="T:C1.Xaml.PopupUtil">
            <summary>
            Utility methods for popups.
            </summary>
        </member>
        <member name="M:C1.Xaml.PopupUtil.Position(Windows.UI.Xaml.Controls.Primitives.Popup,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor)">
            <summary>
            Positions a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement.</param>
        </member>
        <member name="M:C1.Xaml.PopupUtil.Position(Windows.UI.Xaml.Controls.Primitives.Popup,Windows.Foundation.Point)">
            <summary>
            Positions a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> in a specified absolute point.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="point">The popup position.</param>
        </member>
        <member name="M:C1.Xaml.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,Windows.Foundation.Point,System.Double,System.Double,Windows.UI.Xaml.FlowDirection)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <param name="flowDir">The FlowDirection used for the calculations.</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.Xaml.PopupUtil.GetPosition(Windows.UI.Xaml.UIElement,Windows.Foundation.Point)">
            <summary>
            return a absolute position according to the relative position of element
            </summary>
            <param name="element">the given element</param>
            <param name="point">the given relative position</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,Windows.Foundation.Point,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.Xaml.PopupUtil.TestPosition(Windows.UI.Xaml.Controls.Primitives.Popup,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.Xaml.PopupUtil.TestPosition(Windows.UI.Xaml.Controls.Primitives.Popup,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.Xaml.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,Windows.UI.Xaml.FrameworkElement,C1.Xaml.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.Xaml.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="T:C1.Xaml.C1ProgressBar">
            <summary>
            Visual element which indicates the progress of an operation.
            </summary>
            <summary>
            C1ProgressBar represents a control that indicates indeterminate progress of an operation.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1ProgressBar.TemplateSettings">
            <summary>
            Gets the settings that can be bound in the template of the control.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ProgressBar.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether the control is in the indeterminate state.
            
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressBar.IsIndeterminate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBar.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressBar.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressBar.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBar.IndeterminateForeground">
            <summary>
            Gets or sets a brush used to highlight the dots when the bar is in indeterminate state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressBar.IndeterminateForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressBar.IndeterminateForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ProgressBar.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ProgressBar.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ProgressBar"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1ProgressBarTemplateSettings">
            <summary>
            Seetings of <see cref="T:C1.Xaml.C1ProgressBar"/> to be used in the control template.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.IndicatorWidth">
            <summary>
            Gets the width of the indicator.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.EllipseDiameter">
            <summary>
            Gets the template-defined diameter of the Ellipse element that is animated in a templated <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.EllipseOffset">
            <summary>
            Gets the template-defined offset position of the Ellipse element that is animated in a templated <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.ContainerAnimationStartPosition">
            <summary>
            Gets the From point of the container animation that animates the <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.ContainerAnimationEndPosition">
            <summary>
            Gets the target To point of the container animation that animates the <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.EllipseAnimationWellPosition">
            <summary>
            Gets the stopped point of the Ellipse animation that animates the <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.EllipseAnimationEndPosition">
            <summary>
            Gets the To point of the Ellipse animation that animates the <see cref="T:C1.Xaml.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressBarTemplateSettings.IndicatorLengthDelta">
            <summary>
            Gets the indicator length delta, which is useful for repositioning transitions.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1ProgressBarTemplateSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1ProgressIndicator">
            <summary>
            Visual element which indicates application busy state.
            </summary>
            <summary>
            C1ProgressIndicator represents a control that indicates applycation busy state.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.IsActive">
            <summary>
            Gets or sets a value indicating whether the control is in the active state.
            
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.IsActive"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.Header">
            <summary>
            Gets or sets the header of this control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderFontFamily">
            <summary>
            Gets or sets the font family of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderFontFamilyProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderFontFamily"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderFontSize">
            <summary>
            Gets or sets the font size of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderFontSizeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderFontSize"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderFontStretch">
            <summary>
            Gets or sets the font stretch of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderFontStretchProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderFontStretch"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderFontStyle">
            <summary>
            Gets or sets the font style of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderFontStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderFontStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderFontWeight">
            <summary>
            Gets or sets the font weight of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderFontWeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderFontWeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderPadding">
            <summary>
            Gets or sets the padding of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderPaddingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderPadding"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HorizontalHeaderAlignment">
            <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HorizontalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HorizontalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.VerticalHeaderAlignment">
            <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.VerticalHeaderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.VerticalHeaderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1ProgressIndicator.HeaderForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1ProgressIndicator.HeaderForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1ProgressIndicator.HeaderForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ProgressIndicator.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1ProgressIndicator"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1ProgressIndicator.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1ProgressIndicator"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1RadialColorItem">
            <summary>
            An item for color selection inside a C1RadialMenu control.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.HasContent">
            <summary>
            Gets a value that indicates whether the <see cref="T:C1.Xaml.C1RadialColorItem"/> contains sub-items or any other content.
            </summary>
            <remarks>This property returns false for empty items, used as separators.</remarks>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.Index">
            <summary>
            Gets the index of this <see cref="T:C1.Xaml.C1RadialColorItem" /> in its parent items collection.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialColorItem.OnClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a click action by raising a Click event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.Brush">
            <summary>
            Gets or sets the <see cref="P:C1.Xaml.C1RadialColorItem.Brush" /> property.
            </summary>
            <remarks>
            This property will be set automatically if application sets the <see cref="P:C1.Xaml.C1RadialColorItem.Color" /> property.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialColorItem.BrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialColorItem.Brush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.Color">
            <summary>
            Gets or sets the <see cref="P:C1.Xaml.C1RadialColorItem.Color" /> property.
            </summary>
            <remarks>
            This property will be set automatically if application sets the <see cref="P:C1.Xaml.C1RadialColorItem.Brush" /> property.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialColorItem.ColorProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialColorItem.Color"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialColorItem.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialColorItem.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItem.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialColorItem.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialColorItem.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialColorItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialColorItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialColorItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RadialColorItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1RadialMenu">
            <summary>
            The C1RadialMenu control represents a touch-friendly alternative to the traditional context menu.
            </summary>	
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Closing">
            <summary>
            Occurs when the C1RadialMenu is Closing.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Closing"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Opening">
            <summary>
            Occurs when the C1RadialMenu is Opening.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Opening"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Opened">
             <summary>
            Occurs when the C1RadialMenu opens.
             </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Opened"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Closed">
             <summary>
            Occurs when the C1RadialMenu closes.
             </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Closed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Collapsing">
            <summary>
            Occurs when the C1RadialMenu is collapsing.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnCollapsing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Collapsing event.
            </summary>
            <param name="e">Provides data for CancelEventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Collapsed">
            <summary>
            Occurs when the C1RadialMenu is collapsed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnCollapsed(System.EventArgs)">
            <summary>
            Raises the Collapsed event.
            </summary>
            <param name="e">Provides data for EventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Expanding">
            <summary>
            Occurs when the C1RadialMenu is expanding.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnExpanding(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Expanding event.
            </summary>
            <param name="e">Provides data for CancelEventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.Expanded">
            <summary>
            Occurs when the C1RadialMenu is expanded.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnExpanded(System.EventArgs)">
            <summary>
            Raises the Expanded event.
            </summary>
            <param name="e">Provides data for EventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemClick">
            <summary>
            Occurs when a C1RadialMenuItem is clicked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemClick"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemOpening">
            <summary>
            Occurs when a C1RadialMenuItem is opening.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemOpening(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemOpening"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemOpened">
            <summary>
            Occurs when a C1RadialMenuItem is opened.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemOpened(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemOpened"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemClosing">
            <summary>
            Occurs when a C1RadialMenuItem is closing.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemClosing(C1.Xaml.CancelSourceEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemClosing"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemClosed">
            <summary>
            Occurs when a C1RadialMenuItem is closed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemClosed(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemClosed"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemChecked">
            <summary>
            Occurs when a C1RadialMenuItem is checked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemChecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemChecked"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenu.ItemUnchecked">
            <summary>
            Occurs when a C1RadialMenuItem is unchecked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnItemUnchecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Xaml.C1RadialMenu.ItemUnchecked"/> event.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.HasItems">
            <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.IsCollapsed">
            <summary>
            Gets a value that indicates whether the menue is collapsed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.RootElement">
            <summary>
            Gets the root visible element of the <see cref="T:C1.Xaml.C1RadialMenu"/> control. 
            </summary>
            <remarks>If you need to show popup relative to the C1RadialMenu control, use RootElement as PlacementTarget.</remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnAutoCollapseChanged(System.Boolean)">
            <summary>
            Called when the property AutoCollapse is changed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.Show(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            Displays the radial menu at the specified position. 
            </summary>
            <remarks>This method shows menu in the collapsed state.</remarks>
            <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
            <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.Show(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point,System.Boolean)">
            <summary>
            Displays the radial menu at the specified position. 
            </summary>
            <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
            <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
            <param name="expand">Specifies whhether menu should be expanded at opening.</param>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.Hide">
            <summary>
            Hides the menu.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.Expand">
            <summary>
            Expands the menu.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.Collapse">
            <summary>
            Collapses the menu.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.CurrentItem">
            <summary>
            Gets the C1RadialMenu or C1RadialMenuItem control which items are currently visible in the <see cref="T:C1.Xaml.C1RadialMenu"/> UI.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.CurrentItemProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.CurrentItem"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.GoBack">
            <summary>
            Navigates the <see cref="T:C1.Xaml.C1RadialMenu"/> control one level up as if end-user clicked Back button.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.AutoCollapse">
            <summary>
            Gets or sets a value indicating if the menu will auto collapse when the user clicks outside of it.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.AutoCollapseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.AutoCollapse"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ExpandAreaThickness">
            <summary>
            Gets or sets the thickness of expand area.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ExpandAreaThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ExpandAreaThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.AccentBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to color small menu parts.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.AccentBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.AccentBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.Icon">
            <summary>
            Gets or sets the icon that appears in a C1RadialMenu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.IconProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.Icon"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ItemIconStyle">
            <summary>
            Gets or sets the style used to display the icon.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ItemIconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ItemIconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ColorItemStyle">
            <summary>
            Gets or sets the style used to display the C1RadialColorItem.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ColorItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ColorItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.RadialSliderStyle">
            <summary>
            Gets or sets the style used to display the C1RadialSlider.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.RadialSliderStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.RadialSliderStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.NavigationButtonRelativeSize">
            <summary>
            Gets or sets the navigation button size relative to the menu size.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.NavigationButtonRelativeSizeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.NavigationButtonRelativeSize"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.NavigationButtonStyle">
            <summary>
            Represents the style to apply to navigation button.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.NavigationButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.NavigationButtonStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.Offset">
            <summary>
            Gets or sets the relative offset of the C1RadialMenu relative to the pointer position.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.OffsetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.Offset"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.PlacementTarget">
            <summary>
            Gets or sets the FrameworkElement relative to which the C1RadialMenu is positioned when it opens. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.PlacementTarget"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ToolTipPlacement">
            <summary>
            Gets or sets the tooltip placement.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ToolTipPlacementProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ToolTipPlacement"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ToolTipTemplate">
            <summary>
            Gets or sets the data template used to display the tooltip.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ToolTipTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ToolTipTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.ShowToolTip">
            <summary>
            Determines whether the control should display tooltips for individual items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.ShowToolTipProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.ShowToolTip"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.SectorCount">
            <summary>
            Gets or sets the number of sectors which should be displayed in menu.
            </summary>
            <remarks>
            The default value is -1 and the actual number of sectors is defined by the number of menu items.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.SectorCountProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.SectorCount"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenu.BackIcon">
            <summary>
            Gets or sets the back icon that appears in a C1RadialMenu.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenu.BackIconProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenu.BackIcon"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialMenu"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenu.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RadialMenu"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.SelectedItemOptions">
            <summary>
            Determines what part of the selected item should be displayed in the parent C1RadialMenuItem.
            </summary>
            <remarks>Note, the options don't include item check sign. It is always shown for checked items.</remarks>
        </member>
        <member name="F:C1.Xaml.SelectedItemOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectedItemOptions.Header">
            <summary>
            The header.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectedItemOptions.Icon">
            <summary>
            The icon.
            </summary>
        </member>
        <member name="F:C1.Xaml.SelectedItemOptions.All">
            <summary>
            All parts.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1RadialMenuItem">
            <summary>
            Represents a selectable item inside a C1RadialMenu control.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1RadialMenuItem.Click">
            <summary>
            Occurs when the <see cref="T:C1.Xaml.C1RadialMenuItem"/> is clicked. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnClick(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a click action by raising a Click event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenuItem.Checked">
            <summary>
            Occurs when a C1RadialMenuItem is checked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnChecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to a check item action by raising a Checked event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="E:C1.Xaml.C1RadialMenuItem.Unchecked">
            <summary>
            Occurs when a C1RadialMenuItem is unchecked.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnUnchecked(C1.Xaml.SourcedEventArgs)">
            <summary>
            Responds to an uncheck item action by raising a Unchecked event.
            </summary>
            <param name="e">Provides data for SourcedEventArgs.</param>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Index">
            <summary>
            Gets the index of this <see cref="T:C1.Xaml.C1RadialMenuItem" /> in its parent items collection.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.HasItems">
            <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.HasContent">
            <summary>
            Gets a value that indicates whether the <see cref="T:C1.Xaml.C1RadialMenuItem"/> contains sub-items or any other content.
            </summary>
            <remarks>This property returns false for empty items, used as separators.</remarks>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ParentItem">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.Controls.ItemsControl"/> that is the parent of this item.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialMenu" /> of this item.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnHeaderChanged(System.Object)">
            <summary>
            Called when the value of the <see cref="P:Header"/> property changes.
            </summary>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnRightTapped(Windows.UI.Xaml.Input.RightTappedRoutedEventArgs)">
            <summary>
            Called before the System.Windows.UIElement.MouseRightButtonDown event occurs.
            </summary>
            <param name="e">
            A System.Windows.Input.MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.ChangeVisualStateHighlighted(System.Boolean)">
            <summary>
            Updates the current visual state of the Highlighted visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Angle">
            <summary>
            Gets or sets the item angle.
            </summary>
            <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.AngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.Angle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ExpandAreaThickness">
            <summary>
            Gets or sets the thickness of expand area.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ExpandAreaThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ExpandAreaThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.CenterPoint">
            <summary>
            Gets the coordinates of the circle center, which can be used in xaml to draw circle sector, representing the current C1RadialMenuItem.
            </summary>
            <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.CenterPointProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.CenterPoint"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.OuterArc">
            <summary>
            Gets the definition of outer arc segment which can be used in xaml to draw circle sector, representing the current C1RadialMenuItem.
            </summary>
            <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.OuterArcProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.OuterArc"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ExpandArc">
            <summary>
            Gets the definition of expand area arc segment.
            </summary>
            <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ExpandArcProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ExpandArc"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.CheckArc">
            <summary>
            Gets the definition of check arc segment.
            </summary>
            <remarks>
            This property is set by the C1RadialPanel panel.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.CheckArcProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.CheckArc"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Command">
            <summary>
            Gets or sets the command to invoke when this button is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.Command"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.CommandParameter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ForcePointerOver">
            <summary>
            Gets a value indicating whether to force the pointer over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ForcePointerOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ForcePointerOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.GroupName">
            <summary>
            Gets or sets the name that specifies which MenuItems are mutually exclusive (when checkable).
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.GroupNameProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.GroupName"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Header">
            <summary>
            Gets or sets the header of this control.
            </summary>
            <remarks>
            This property will be displayed in the tooltip as well if ToolTip property is not set.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.AccentBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to color small menu parts.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.AccentBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.AccentBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a C1RadialMenuItem.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IconProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.Icon"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IconStyle">
            <summary>
            Gets or sets the style used to display the icon.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IconStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IconStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IsCheckable">
            <summary>
            Gets a value that indicates whether a C1RadialMenuItem can be checked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IsCheckableProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IsCheckable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IsChecked">
            <summary>
            Gets or sets a value that indicates whether the C1RadialMenuItem is checked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IsChecked"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IsHighlighted">
            <summary>
            Gets a value that indicates whether a C1RadialMenuItem is highlighted.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IsHighlightedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IsHighlighted"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IsPointerOver">
            <summary>
            Gets a value indicating whether the pointer is located over this element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IsPointerOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IsPointerOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1RadialMenuItem.IsPointerOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsPointerOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.TextAlignment">
            <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.TextWrapping">
            <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.TextWrapping"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ToolTip">
            <summary>
            Gets or sets the tooltip of this control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ToolTipProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ToolTip"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ShowSelectedItem">
            <summary>
            Determines whether icon, header and check sign of the selected sub-item should be displayed for the curren item.
            </summary>
            <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ShowSelectedItemProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ShowSelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.SelectedItemOptions">
            <summary>
            Determines what part of the selected sub-item should be displayed for the curren item.
            </summary>
            <remarks>
            This property only makes sense for items with sub-items when the <see cref="P:C1.Xaml.C1RadialMenuItem.ShowSelectedItem" /> property is true.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.SelectedItemOptionsProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.SelectedItemOptions"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.SelectedIndex">
            <summary>
            Gets or sets the index of the curerntly selected sub-item.
            </summary>
            <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.SelectedIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.AutoSelect">
            <summary>
            Determines whether C1RadialMenuItem should update SelectedIndex property acccording to the end-user selection.
            </summary>
            <remarks>
            This property only makes sense for items with sub-items.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.AutoSelectProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.AutoSelect"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.IsSelectable">
            <summary>
            Determines whether this item should be honored when SelectedIndex property is changed acccording to the end-user selection.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.IsSelectableProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.IsSelectable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.SectorCount">
            <summary>
            Gets or sets the number of sectors which should be displayed in menu.
            </summary>
            <remarks>
            This property only makes sense if item has subitems. If this property is set to -1, the number of sectors will be defined by the number of menu items.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.SectorCountProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.SectorCount"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.DisplayIndex">
            <summary>
            Gets or sets the zero-based index of this item which should be used to layout this item in the parent submenu.
            </summary>
            <remarks>
            The default value is -1 and the actual item index is defined by its place in the parent Items collection.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.DisplayIndexProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.DisplayIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.ItemContainerStyle">
            <summary>
            Gets or sets the item container style used to display the item container .
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.ItemContainerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.CollapseOnClick">
            <summary>
            Gets or sets a value indicating if the menu will auto collapse when the user clicks on item which has no child items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.CollapseOnClickProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.CollapseOnClick"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.HeaderBackground">
            <summary>
            Gets or sets the background brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.HeaderBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.HeaderBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItem.HeaderForeground">
            <summary>
            Gets or sets the foreground brush of the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialMenuItem.HeaderForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialMenuItem.HeaderForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialMenuItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RadialMenuItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1RadialMenuItemsPresenter">
            <summary>
            Used within the template of the <see cref="T:C1.Xaml.C1RadialMenu"/> control to specify where items are placed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItemsPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1RadialMenuItemsPresenter"/> control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialMenuItemsPresenter.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialMenu" /> control.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialMenuItemsPresenter.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="T:C1.Xaml.C1RadialColorItemsPresenter">
            <summary>
            Used within the template of the <see cref="T:C1.Xaml.C1RadialMenu"/> control to specify where submenu of the C1RadialColorItem should be placed.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialColorItemsPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1RadialColorItemsPresenter"/> control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItemsPresenter.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialMenu" /> control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialColorItemsPresenter.CurrentItem">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialColorItem" /> item.
            </summary>
            <remarks>The <see cref="T:C1.Xaml.C1RadialMenu"/> updates this property value every time before opening the <see cref="T:C1.Xaml.C1RadialColorItem"/> submenu.</remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialColorItemsPresenter.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="T:C1.Xaml.C1RadialBackgroundPresenter">
            <summary>
            The supplementary control to use in the <see cref="T:C1.Xaml.C1RadialMenu"/> control template.
            </summary>
            <remarks>It wraps Items into ContentControls with specified ItemContainerStyle and propagates item background to the wrapper ContentControl.</remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialBackgroundPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1RadialBackgroundPresenter"/> control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialBackgroundPresenter.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialMenu" /> control.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1RadialNumericItem">
            <summary>
            An item for numeric items selection inside a C1RadialMenu control.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.Value">
            <summary>
            Gets or sets the <see cref="P:C1.Xaml.C1RadialNumericItem.Value" /> property.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.Minimum">
            <summary>
            Minimum value for the <see cref="T:C1.Xaml.C1RadialNumericItem" />.
            </summary>
            <remarks>
            If it is not set, control will use the minimum value from the Items collection.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.Maximum">
            <summary>
            Maximum value for the <see cref="T:C1.Xaml.C1RadialNumericItem" />.
            </summary>
            <remarks>
            If it is not set, control will use the maximum value from the Items collection will be used.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.Interval">
            <summary>
            Value interval to generate items if Items collection is empty.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.GaugeStartAngle">
            <summary>
            Gets or sets a value that indicates the angle to position the radial gauge beginning.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.GaugeStartAngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.GaugeStartAngle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.MarkStartAngle">
            <summary>
            Gets or sets a value that indicates the angle to position the first mark.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.MarkStartAngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.MarkStartAngle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.MarkEndAngle">
            <summary>
            Gets or sets a value that indicates the angle to position the last mark.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.MarkEndAngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.MarkEndAngle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.SliderMargin">
            <summary>
            The margin of the radial slider.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.SliderMarginProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.SliderMargin"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.PointerStyle">
            <summary>
            Gets or sets the style used to display the pointer in the radial slider.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.PointerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.PointerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.MarkStyle">
            <summary>
            Gets or sets the style used to display the mark in the radial slider.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.MarkStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.MarkStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialNumericItem.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialNumericItem.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialNumericItem.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialNumericItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialNumericItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialNumericItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RadialNumericItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1RadialPanel">
            <summary>
            Positions child elements in a circle, from the StartAngle to the EndAngle in the clockwise direction.
            </summary>	
        </member>
        <member name="P:C1.Xaml.C1RadialPanel.SetExplicitAngles">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether the panel should set Angle attached property on children elements.
            The default value is False.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.ArcRelativeRadiusProperty">
            <summary>
            This attached property specifies the relative radius which should be used to count 
            the ArcSegmentDefinition attached property for the specified element.
            The default value is 1.0. 
            </summary>
            <remarks>
            The actual arc radius will be counted as <see cref="T:C1.Xaml.C1RadialPanel"/> radius multiplied by ArcRelativeRadius property value.
            If this property is set on the parent ItemsControl, C1RadialPanel will honor it at counting ArcSegmentDefinition for individual items.
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.GetArcRelativeRadius(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the relative arc radius value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.SetArcRelativeRadius(Windows.UI.Xaml.DependencyObject,System.Double)">
            <summary>
            Sets the relative arc radius value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <param name="value"></param>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.ArcThicknessProperty">
            <summary>
            This attached property specifies the arc thickness which can be used in the element control template.
            </summary>
            <remarks>
            If this property is set on the parent ItemsControl, C1RadialPanel will set it on individual items 
            and honor it at counting ArcSegmentDefinition for individual items.
            </remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.GetArcThickness(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the arc thickness value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.SetArcThickness(Windows.UI.Xaml.DependencyObject,System.Double)">
            <summary>
            Sets the arc thickness value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <param name="value"></param>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.ArcSegmentDefinitionProperty">
            <summary>
            This attached property holds the <see cref="T:C1.Xaml.ArcSegmentDef"/> object which can be used in the element control template.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.GetArcSegmentDefinition(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="T:C1.Xaml.ArcSegmentDef"/> value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.SetArcSegmentDefinition(Windows.UI.Xaml.DependencyObject,C1.Xaml.ArcSegmentDef)">
            <summary>
            Sets the <see cref="T:C1.Xaml.ArcSegmentDef"/> value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <param name="value"></param>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.AngleProperty">
            <summary>
            This attached property specifies explicit angle which should be used to arrange element.
            </summary>
            <remarks>The <see cref="T:C1.Xaml.C1RadialPanel"/> sets this property automatically on any children which are not derived from the <see cref="T:C1.Xaml.C1RadialMenuItem"/>.</remarks>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.GetAngle(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the angle value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.SetAngle(Windows.UI.Xaml.DependencyObject,System.Double)">
            <summary>
            Sets the angle value.
            </summary>
            <param name="obj">The element which contains the attached property.</param>
            <param name="value"></param>
        </member>
        <member name="P:C1.Xaml.C1RadialPanel.StartAngle">
            <summary>
            Gets or sets a value that indicates the angle to position the first child element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.StartAngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialPanel.StartAngle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialPanel.EndAngle">
            <summary>
            Gets or sets a value that indicates the angle to position the last child element.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.EndAngleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialPanel.EndAngle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialPanel.RotateChildren">
            <summary>
            Gets or sets a value that specifies whether the panel should apply RotateTransform to the child elements.
            </summary>
            <remarks>
            Set this property to false if you want to keep children orientation.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1RadialPanel.RotateChildrenProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialPanel.RotateChildren"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1RadialSlider">
            <summary>
            Used within the template of the <see cref="T:C1.Xaml.C1RadialMenu"/> control to display radial slider for selecting numeric values.
            </summary>
            <summary>
            control to display radial slider for selecting numeric values.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1RadialSlider.SetCustomDefaultValues">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.C1RadialSlider"/> control.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialSlider.PointerStyle">
            <summary>
            Gets or sets the style to draw pointer.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialSlider.PointerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialSlider.PointerStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialSlider.CircularBrush">
            <summary>
            Gets the circular brush which can be used in the control template to represent radial gauge.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1RadialSlider.CircularBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1RadialSlider.CircularBrush"/> dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1RadialSlider.Menu">
            <summary>
            Identifies the parent <see cref="T:C1.Xaml.C1RadialMenu" /> control.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialSlider.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:C1.Xaml.C1RadialSlider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1RadialSlider"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1RadialSlider.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1RadialSlider"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.AngleConverter">
            <summary>
            Multiplies supplied double value by the parameter value.
            </summary>
        </member>
        <member name="M:C1.Xaml.AngleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Multiplies supplied double value by the parameter value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.AngleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.DoubleToThicknessConverter">
            <summary>
            Converts double value to the thickness with uniform length on each side.
            </summary>
        </member>
        <member name="M:C1.Xaml.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts double value to the thickness with uniform length on each side.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.ArcSegmentDef">
            <summary>
            Keeps arc segment definition properties which can be used in xaml to draw the ArcSegment.
            </summary>
        </member>
        <member name="P:C1.Xaml.ArcSegmentDef.Size">
            <summary>
            Gets or sets the x-radius and y-radius of the arc as a Size structure.
            </summary>
        </member>
        <member name="P:C1.Xaml.ArcSegmentDef.StartPoint">
            <summary>
            Gets or sets the start point of the elliptical arc.
            </summary>
        </member>
        <member name="P:C1.Xaml.ArcSegmentDef.EndPoint">
            <summary>
            Gets or sets the endpoint of the elliptical arc.
            </summary>
        </member>
        <member name="E:C1.Xaml.ArcSegmentDef.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1DataTemplateSelector">
            <summary>
            Provides a way to apply data templates based on custom logic.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1DataTemplateSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="T:C1.Xaml.C1HierarchicalDataTemplate">
            <summary>
            Represents a DataTemplate that supports C1HierarchicalPresenter, such as TreeViewItem.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the binding for this data template, which indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate to apply to the ItemTemplate property on a generated
            C1HierarchicalPresenter (such as a TreeViewItem), to indicate how to display
            items from the next level in the data hierarchy.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1StyleSelector">
            <summary>
            Provides a way to apply styles based on custom logic.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1StyleSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="T:C1.Xaml.C1LinePanel">
            <summary>
            C1LinePanel arranges a list of items in a single row or column.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1LinePanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LinePanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1LinePanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1LinePanel.Reverse">
            <summary>
            Gets or sets whether the items are arranged top-down/left-right or bottom-up/right-left.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1LinePanel.ReverseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1LinePanel.Reverse"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1LinePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1LinePanel"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1LinePanel.LineDefinitions">
            <summary>
            Gets the collection of specifications of how much space to give to each item.
            </summary>
        </member>
        <member name="T:C1.Xaml.LineDefinition">
            <summary>
            Defines row or column specific properties that apply to <see cref="T:C1.Xaml.C1LinePanel"/> elements.
            </summary>
        </member>
        <member name="P:C1.Xaml.LineDefinition.Length">
            <summary>
            Gets or sets a value that represents the height or width of the <see cref="T:C1.Xaml.LineDefinition"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.LineDefinitionCollection">
            <summary>
            Provides access to an ordered, strongly typed collection of LineDefinition objects.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabControl">
            <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>	
        </member>
        <member name="E:C1.Xaml.C1TabControl.VisibleItemsChanged">
            <summary>
            Occurs when the the visible items change.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.VisibleItems">
            <summary>
            A read-only collection that contains all visible items in the <see cref="T:C1.Xaml.C1TabControl"/>
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.SelectedItem">
            <summary>
            Gets or sets the selected item or returns null if the selection is empty.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.SelectedItemProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </value>
        </member>
        <member name="M:C1.Xaml.C1TabControl.OnSelectedItemChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItem property changed handler.
            </summary>
            <param name="d">TabControl that changed its SelectedItem.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:C1.Xaml.C1TabControl.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
            <value>
            The index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />, or -1 if a
            <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
            </value>
        </member>
        <member name="E:C1.Xaml.C1TabControl.SelectionChanged">
            <summary>
            Occurs when selection changed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.SelectedIndexProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </value>
        </member>
        <member name="M:C1.Xaml.C1TabControl.OnSelectedIndexChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedIndex property changed handler.
            </summary>
            <param name="d">TabControl that changed its SelectedIndex.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1TabControl.ScrollIntoView(System.Object)">
            <summary>
            Causes the object to scroll into view. 
            </summary>
            <param name="item">Object to scroll.</param>
        </member>
        <member name="P:C1.Xaml.C1TabControl.SelectedContent">
            <summary>
            Gets the content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
            <value>
            The content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />. The default is
            null.
            </value>
        </member>
        <member name="F:C1.Xaml.C1TabControl.SelectedContentProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </value>
        </member>
        <member name="E:C1.Xaml.C1TabControl.ItemsChanged">
            <summary>
            Called when the value of the System.Windows.Controls.ItemsControl.Items property changes.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.BeginUpdate">
            <summary>
            Maintains performance while items are added to the TabControl one at a time
            by preventing the control from updating until the <see cref="M:C1.Xaml.C1TabControl.EndUpdate"/>
            method is called.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.EndUpdate">
            <summary>
            Resumes updating the TabControl after updates are suspended by the
            <see cref="M:C1.Xaml.C1TabControl.BeginUpdate"/> method.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the value of the <see cref="P:Items"/> property changes.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TabControl.TabItemClosed">
            <summary>
            Occurs when a <see cref="T:C1.Xaml.C1TabItem"/> is closed.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TabControl.TabItemClosing">
            <summary>
            Occurs before a <see cref="T:C1.Xaml.C1TabItem"/> is closed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ContentTemplateSelector">
            <summary>
            Gets or sets a custom logic for choosing the template used to display the content of the control
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ContentTemplateSelectorProperty">
            <summary>
            Identifies the ContentTemplateSelectorProperty dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ItemTemplateSelector">
            <summary>
            Gets or sets the custom logic for choosing a template used to display each item.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ItemTemplateSelectorProperty">
            <summary>
            Identifies the ItemTemplateSelectorProperty dependency property.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.ChangeVisualStateShape(System.Boolean)">
            <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ShowSingleTab">
            <summary>
            Gets or sets a value that determines whether the tab strip is shown when the control has only one child.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ShowSingleTabProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.ShowSingleTab"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripPlacement">
            <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripPlacementProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripPlacement"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripOverlap">
            <summary>
            Gets or sets the length of the overlap between <see cref="T:C1.Xaml.C1TabItem"/>s.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripOverlapProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripOverlap"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripOverlapDirection">
            <summary>
            Gets or sets the Z-Index arrangement of the <see cref="T:C1.Xaml.C1TabItem"/>s.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripOverlapDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripOverlapDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabItemShape">
            <summary>
            Gets or sets the geometric shape of the tabs.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabItemShapeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabItemShape"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabItemClose">
            <summary>
            Gets or sets the location of the Close button.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabItemCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabItemClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ItemContainerStyle">
            <summary>
            Gets or sets the Style applied to all contained <see cref="T:C1.Xaml.C1TabItem"/>s
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.ItemContainerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripMenuVisibility">
            <summary>
            Gets or sets the visibility of the menu listing the items.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripMenuVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripMenuVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.CanUserReorder">
            <summary>
            Whether the user is allowed to drag and drop and reorder C1TabItems from this C1TabControl.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.CanUserReorderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.CanUserReorder"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.UpdateSourceCollection">
            <summary>
            Gets or sets whether changes in the order of the items are written to Items or ItemsSource.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.UpdateSourceCollectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.UpdateSourceCollection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the group of <see cref="T:C1.Xaml.C1TabItem"/>s.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripHorizontalAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the group of <see cref="T:C1.Xaml.C1TabItem"/>s.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripVerticalAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ContentTemplate">
            <summary>
            Gets or sets the DataTemplate to apply to any TabItem that does not have a ContentTemplate property defined.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.ContentTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.UnselectedContentMode">
            <summary>
            Gets or sets what is done with the content of unselected items.
            </summary>
            <remarks>
            The default is OutsideVisualTree, which removes from the visual tree the content of unselected items. Changing the property to retain the content of unselected items improves performance at the cost of memory.
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1TabControl.UnselectedContentModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.UnselectedContentMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TabControl.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> that will be assigned to the Background of the tab strip.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabControl.TabStripForeground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> that will be assigned to the Foreground of the tab strip.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabControl.TabStripForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabControl.TabStripForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TabControl"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TabControl"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.CancelSourceEventArgs">
            <summary>
            Provides data for a cancelable event.
            </summary>
        </member>
        <member name="P:C1.Xaml.CancelSourceEventArgs.Source">
            <summary>
            Gets or sets the source of the event.
            </summary>
        </member>
        <member name="T:C1.Xaml.UnselectedContentMode">
            <summary>
            Determines how <see cref="T:C1.Xaml.C1TabControl"/> retains the content of <see cref="T:C1.Xaml.C1TabItem"/>s never or no longer selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.UnselectedContentMode.OutsideVisualTree">
            <summary>
            The visual tree only contains the content of the selected item.
            The content of unselected items is not in the visual tree.
            </summary>
        </member>
        <member name="F:C1.Xaml.UnselectedContentMode.Collapsed">
            <summary>
            The content of an item is grafted into the visual tree when first selected.
            When an item is unselected, the content is kept in visual tree with collapsed visibility.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabItem">
            <summary>
            Represents a selectable item in a <see cref="T:C1.Xaml.C1TabControl"/>.
            </summary>	
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:Content"/> property changes.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.Header"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.HeaderTemplateSelector">
            <summary>
            Gets or sets a data template selector that provides custom logic for choosing the template used to display the header.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.HeaderTemplateSelectorProperty">
            <summary>
            Identifies the HeaderTemplateSelector dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.ContentTemplateSelector">
            <summary>
            Gets or sets a data template selector that provides custom logic for choosing the template used to display the content.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.ContentTemplateSelectorProperty">
            <summary>
            Identifies the ContentTemplateSelector dependency property.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.HeaderTemplate">
            <summary>
            Gets or sets a data template that is used to display the contents of the control's <see cref="P:C1.Xaml.C1TabItem.Header"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.TabItem" /> is currently
            selected.
            </summary>
            <value>
            True if the <see cref="T:System.Windows.Controls.TabItem" /> is
            selected; otherwise, false.
            </value>
        </member>
        <member name="F:C1.Xaml.C1TabItem.IsSelectedProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </value>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnIsSelectedChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelected changed handler.
            </summary>
            <param name="d">TabItem that changed IsSelected.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnSelected(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to true.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnUnselected(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to false.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:KeyDown"/> event that occurs when the user presses a key while this control has focus.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the <see cref="E:PointerPressed"/> event occurs.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.InitializePinButtonPart">
            <summary>
            The <see cref="T:C1.Xaml.C1TabItem"/> is changed from Unpinned to Pinned <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.InitializeUnpinButtonPart">
            <summary>
            The <see cref="T:C1.Xaml.C1TabItem"/> is changed from Pinned to Unpinned <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.ChangeVisualStatePinMode(System.Boolean)">
            <summary>
            Updates the current visual state of the PinMode visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.TabShape">
            <summary>
            Gets or sets the visual form of the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.TabShapeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.TabShape"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.CanUserClose">
            <summary>
            Gets or sets a value indicating whether the user is allowed to dismiss this <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.CanUserCloseProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.CanUserClose"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.IsSelectable">
            <summary>
            Gets or sets a value indicating whether the user is allowed to select this <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.IsSelectableProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.IsSelectable"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.ActualPinModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.ActualPinMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.CanUserPin">
            <summary>
            Gets or sets a value indicating whether the user is allowed to pin or unpin this <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.CanUserPinProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.CanUserPin"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TabItem.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItem.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItem.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItem.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TabItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.PinMode">
            <summary>
            Possible states of pin status for a <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.PinMode.Unpinned">
            <summary>
            The <see cref="T:C1.Xaml.C1TabItem"/> is scrollable <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.PinMode.Pinned">
            <summary>
            The <see cref="T:C1.Xaml.C1TabItem"/> is unscrollable and fixed <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabItemBorder">
            <summary>
            Control containing the header of a <see cref="T:C1.Xaml.C1TabItem"/>.
            Supports different appearances, defined by the <see cref="P:C1.Xaml.C1TabItemBorder.Shape"/> property.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemBorder.ChangeVisualStateShape(System.Boolean)">
            <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemBorder.Shape">
            <summary>
            Gets or sets the geometric shape of the tab.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemBorder.ShapeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemBorder.Shape"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemBorder.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemBorder.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemBorder.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemBorder.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TabItemBorder"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemBorder.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TabItemBorder"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TabItemBorderClipConverter">
            <summary>
            Converter used to clip off the bottom part of ribbon borders.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1SlopedBorderAdjustConverter">
            <summary>
            Converter used to adjust a path so that it renders its stroke inside and not to both side of its position.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabItemPresenter">
            <summary>
            Internal element used in both <see cref="T:C1.Xaml.C1TabItem"/> and C1DockTabItem to avoid repetition.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemPresenter.ChangeVisualStateSelection(System.Boolean)">
            <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemPresenter.ChangeVisualStateTabStripPlacement(System.Boolean)">
            <summary>
            Updates the current visual state of the TabStripPlacement visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemPresenter.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.IsSelected">
            <summary>
            Gets or sets a value indicating whether the element is currently selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.IsSelectedProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.IsSelected"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.TabShape">
            <summary>
            Gets or sets the visual form of the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.TabShapeProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.TabShape"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.TabStripPlacement">
            <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.TabStripPlacementProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.TabStripPlacement"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.ShowSelectedCues">
            <summary>
            Gets or sets a value indicating whether the selected visuals of the control are visible.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.ShowSelectedCuesProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.ShowSelectedCues"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.Xaml.C1TabItemPresenter.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabItemPresenter.SelectedBackground">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemPresenter.SelectedBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabItemPresenter.SelectedBackground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemPresenter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TabItemPresenter"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabItemPresenter.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Xaml.C1TabItemPresenter"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="T:C1.Xaml.C1TabPanel">
            <summary>
            Internal element used in the control template of <see cref="T:C1.Xaml.C1TabControl"/>s.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1TabPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabPanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanel.OverlapProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabPanel.Overlap"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanel.OverlapDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1TabPanel.OverlapDirection"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1TabPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xaml.C1TabPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabPanelOverlapDirection">
            <summary>
            Z-Index arrangement of the items in the <see cref="T:C1.Xaml.C1TabPanel"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanelOverlapDirection.Right">
            <summary>
            Right-most is in the back.
            Selected is in front.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanelOverlapDirection.Left">
            <summary>
            Left-most is in the back.
            Selected is in front.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabPanelOverlapDirection.RightLeftFromSelected">
            <summary>
            Left-most is in the back, right-most is in the back,
            selected is in front.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabItemShape">
            <summary>
            Supported shapes for the <see cref="T:C1.Xaml.C1TabItem"/>
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemShape.Rectangle">
            <summary>
            Squared tab shape.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemShape.Rounded">
            <summary>
            Rounded tab shape.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemShape.Sloped">
            <summary>
            Sloped tab shape.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemShape.Ribbon">
            <summary>
            S-shaped tab.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1TabItemCloseOptions">
            <summary>
            Close button options for the <see cref="T:C1.Xaml.C1TabControl"/>
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemCloseOptions.None">
            <summary>
            Close button is not shown for the <see cref="T:C1.Xaml.C1TabItem"/>s.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemCloseOptions.InEachTab">
            <summary>
            A close button is shown in each <see cref="T:C1.Xaml.C1TabItem"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1TabItemCloseOptions.GlobalClose">
            <summary>
            A unique close button is shown, and the selected <see cref="T:C1.Xaml.C1TabItem"/>
            is closed when it's pressed.
            </summary>
        </member>
        <member name="T:C1.Xaml.IConvertedCharSetEnumerator">
            <summary>
              Defines a enumerator for browsing the <see cref="T:C1.Xaml.ConvertedCharSet"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.IConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="P:C1.Xaml.IConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Xaml.IConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="T:C1.Xaml.ConvertedCharSet">
            <summary>
              Defines a character set, all the characters in it may be converted each other.
            </summary>
        </member>
        <member name="P:C1.Xaml.ConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the character set. It also is the start point of the converting.
            </summary>
            <value>
              A <b>char</b> array indicates a item in the character set.
            </value>
        </member>
        <member name="P:C1.Xaml.ConvertedCharSet.Key">
            <summary>
              Gets the key item in the character set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Xaml.ConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Xaml.ConvertedCharSet"/>.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.Equals(System.Object)">
            <summary>
              Overridden, Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj">
              The Object to compare with the current Object.
            </param>
            <returns>
              true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.GetHashCode">
            <summary>
              Serves as a hash function for a particular type, suitable for use in hashing algorithms 
              and data structures like a hash table.
            </summary>
            <returns>
              A hash code for the current Object.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.op_Equality(C1.Xaml.ConvertedCharSet,C1.Xaml.ConvertedCharSet)">
            <summary>
              Defines the "==" operator, for <see cref="T:C1.Xaml.ConvertedCharSet"/> class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Xaml.ConvertedCharSet"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Xaml.ConvertedCharSet"/> indicates the right operand.
            </param>
            <returns>
              If two operands are equal,return true, otherwise, return false.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.op_Inequality(C1.Xaml.ConvertedCharSet,C1.Xaml.ConvertedCharSet)">
            <summary>
              Defines the "!=" operator, for <see cref="T:C1.Xaml.ConvertedCharSet"/> class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Xaml.ConvertedCharSet"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Xaml.ConvertedCharSet"/> indicates the right operand.
            </param>
            <returns>
              If two operands are equal,return false, otherwise, return true.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.CreateConvertedCharSet(System.Char)">
            <summary>
              Creates a <see cref="T:C1.Xaml.ConvertedCharSet"/> for special character.
            </summary>
            <param name="character">
              A <b>char</b> indicates the special character.
            </param>
            <returns>
              Return a <see cref="T:C1.Xaml.ConvertedCharSet"/> that contains the converted characters of special character.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.CreateConvertedCharSet(System.Char,System.Char)">
            <summary>
              Creates a <see cref="T:C1.Xaml.ConvertedCharSet"/> for special character.
            </summary>
            <param name="character">
              A <b>char</b> indicates the special character.
            </param>
            <param name="followedCharacter">
              A <b>char</b> indicates a character that follows the special character.
            </param>
            <returns>
              Return a <see cref="T:C1.Xaml.ConvertedCharSet"/> that contains the converted characters of special character.
            </returns>
        </member>
        <member name="M:C1.Xaml.ConvertedCharSet.CreateConvertedCharSet(System.String,System.Int32)">
            <summary>
              Creates a <see cref="T:C1.Xaml.ConvertedCharSet"/> for special character.
            </summary>
            <param name="str">
              A <b>string</b> indicates the string.
            </param>
            <param name="index">
              A <b>int</b> indicates a special character in the string.
            </param>
            <returns>
              Return a <see cref="T:C1.Xaml.ConvertedCharSet"/> that contains the converted characters of special character
              in the string.
            </returns>
        </member>
        <member name="T:C1.Xaml.AlphabetConvertedCharSet">
            <summary>
              Defines the converted character set for alphabet.
            </summary>
        </member>
        <member name="T:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for AlphabetConvertedCharSet.
            </summary>
        </member>
        <member name="T:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Steps">
            <summary>
              A enumeration indicates the converted states.
            </summary>
        </member>
        <member name="F:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator._owner">
            <summary>
              Indicates the owner of the enumerator.
            </summary>
        </member>
        <member name="F:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator._step">
            <summary>
              A <b>char</b> array indicates current state.
            </summary>
        </member>
        <member name="M:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.#ctor(C1.Xaml.AlphabetConvertedCharSet)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator"/>.
            </summary>
            <param name="owner">
              Indicates the owner of the enumerator.
            </param>
        </member>
        <member name="P:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Xaml.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Xaml.AlphabetConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Xaml.AlphabetConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the AlphabetConvertedCharSet class.
            </summary>
            <param name="alphabetCharacter">
              A <b>char</b> indicates a alphabet character.
            </param>
        </member>
        <member name="P:C1.Xaml.AlphabetConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Xaml.AlphabetConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Xaml.AlphabetConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Xaml.AlphabetConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Xaml.AlphabetConvertedCharSet"/>.
            </returns>
        </member>
        <member name="T:C1.Xaml.KanaConvertedCharSet">
            <summary>
              Defines the converted character set for the kana characters.
            </summary>
        </member>
        <member name="T:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for the KanaConvertedCharSet.
            </summary>
        </member>
        <member name="F:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator._items">
            <summary>
              Indicates the characters.
            </summary>
        </member>
        <member name="F:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator._currentIndex">
            <summary>
              A <see cref="T:System.Int32"/> indicates the current step index in the character array.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddHiraganaItems(System.Char,C1.Xaml.ArrayList)">
            <summary>
              Add the items for Hiragana.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddFullKatakana(System.Char,C1.Xaml.ArrayList)">
            <summary>
              Add the items for Full Katakana.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddHalfKatakana(System.Char[],C1.Xaml.ArrayList)">
            <summary>
              Add the items for Half Katakana.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.#ctor(C1.Xaml.KanaConvertedCharSet)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSetEnumerator
            </summary>
            <param name="owner">
              Indicates the owner of the KanaConvertedCharSetEnumerator.
            </param>
        </member>
        <member name="P:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Xaml.KanaConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSet class.
            </summary>
            <param name="kanaCharacter">
              A <b>char</b> indicates a kana character.
            </param>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.#ctor(System.Char,System.Char)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSet class.
            </summary>
            <param name="kanaCharacter">
              A <b>char</b> indicates a kana character.
            </param>
            <param name="followedCharacter">
              A <b>char</b> indicates a character that follows the kana character..
            </param>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.Initialize(System.Char[])">
            <summary>
              Initializes the result of the current instance.
            </summary>
        </member>
        <member name="P:C1.Xaml.KanaConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Xaml.KanaConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
            <remarks>
              I choose the Upper Hiragana as the key.
            </remarks>
        </member>
        <member name="M:C1.Xaml.KanaConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Xaml.KanaConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Xaml.KanaConvertedCharSet"/>.
            </returns>
        </member>
        <member name="T:C1.Xaml.NormalConvertedCharSet">
            <summary>
              Defines the enumerator of Normal character set.
            </summary>
        </member>
        <member name="T:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for NormalConvertedCharSet.
            </summary>
        </member>
        <member name="T:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Steps">
            <summary>
              A enumeration indicates the converted states.
            </summary>
        </member>
        <member name="F:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator._owner">
            <summary>
              Indicates the owner of the enumerator.
            </summary>
        </member>
        <member name="F:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator._step">
            <summary>
              A <b>char</b> array indicates current state.
            </summary>
        </member>
        <member name="M:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.#ctor(C1.Xaml.NormalConvertedCharSet)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator"/>.
            </summary>
            <param name="owner">
              Indicates the owner of the enumerator.
            </param>
        </member>
        <member name="P:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Xaml.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Xaml.NormalConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Xaml.NormalConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the AlphabetCharacterGroupEnumerator class.
            </summary>
            <param name="character">
              A <b>char</b> indicates a alphabet character.
            </param>
        </member>
        <member name="P:C1.Xaml.NormalConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Xaml.NormalConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Xaml.NormalConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Xaml.NormalConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Xaml.NormalConvertedCharSet"/>.
            </returns>
        </member>
        <member name="F:C1.Xaml.IndexOffset`1.Index">
            <summary>
            The number of elements before the current position.
            </summary>
        </member>
        <member name="F:C1.Xaml.IndexOffset`1.Offset">
            <summary>
            The sum of the lengths of the elements before the current position.
            </summary>
        </member>
        <member name="T:C1.Xaml.IAggregator`1">
            <summary>
            An ordered monoid.
            </summary>
        </member>
        <member name="M:C1.Xaml.AggregatingTable`2.TotalLength">
            <summary>
            The sum of the length of all elements.
            </summary>
        </member>
        <member name="M:C1.Xaml.AggregatingTable`2.GetLength(System.Int32)">
            <summary>
            The individual length of this element.
            </summary>
        </member>
        <member name="M:C1.Xaml.AggregatingTable`2.FindByIndex(System.Int32)">
            <summary>
            The record for index.  If index is the element count, Offset equals the total length.
            </summary>
        </member>
        <member name="M:C1.Xaml.AggregatingTable`2.FindByLength(`0)">
            <summary>
            The last element with Offset less than or equal to the argument.  May return Index one past the end.
            </summary>
        </member>
        <member name="T:C1.Xaml.ArrayList">
            <summary>
              Represents the <see cref="T:C1.Xaml.ArrayList"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1Colors.IsVisible(Windows.UI.Color)">
            <summary>
            Returns a value indicating whether specified Color value represents
            some "visible" value, for example, this function returns <b>false</b> for
            transparent color.
            </summary>
            <param name="value">Color value to test.</param>
            <returns>This method returs true if color is visible</returns>
        </member>
        <member name="T:C1.Xaml.C1KeyEventArgs">
            <summary>
            Substitutes Silverlight KeyEventArgs in key handlers to enable testing
            </summary>
        </member>
        <member name="T:C1.Xaml.CharType">
            <summary>
              Defines the category of a Unicode character.  
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.OtherChar">
            <summary>
              Indicates that the character is not of a particular category.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Control">
            <summary>
              Indicates that the character is a control code.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Numeric">
            <summary>
              Indicates that the character is a numeric digit.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.MathSymbol">
            <summary>
              Indicates that the character is a mathematical symbol.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Symbol">
            <summary>
              Indicates that the character is a symbol.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Punctuation">
            <summary>
              Indicates that the character is a punctuation. ( Open &amp; Close )
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Space">
            <summary>
              Indicates that the character is a space character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.UpperCase">
            <summary>
              Indicates that the character is an upper case letter.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.LowerCase">
            <summary>
              Indicates that the character is a lower case letter.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Katakana">
            <summary>
              Indicates that the character is a Japanese Katakana character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Hiragana">
            <summary>
              Indicates that the character is a Japanese Hiragana character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.FarEastPunctation">
            <summary>
              Indicates that the character is a CJK punctuation.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.Hangul">
            <summary>
              Indicates that the character is a Hangal character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharType.FullWidth">
            <summary>
              Indicates that the character is of full width.
            </summary>
        </member>
        <member name="T:C1.Xaml.CharHelper">
            <summary>
              Represents the extension functions to the standard .NET Char type. The purpose for this is to provide better
              CJK (Chinese, Japanese, Korean ) character support.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.Null">
            <summary>
             Defines the Null char.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.Backspace">
            <summary>
              Defines the control char: Backspace
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.Tab">
            <summary>
              Defines the control char: Tab.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.Space">
            <summary>
              Defines the control char: Space.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.SBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the SBCS space character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.DBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the DBCS space character.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._charstarts">
            <summary>
              Character groups (character codes) based on Unicode 3.1.
            </summary>
        </member>
        <member name="T:C1.Xaml.CharHelper.Blocks">
            <summary>
              Character blocks categorized base on the Unicode standard.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._fullhalfblocks">
            <summary>
              Table of multi-width character blocks.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._mwtable">
            <summary>
              Type of multi-width characters.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._halfkana">
            <summary>
              Mapping table of full width Katakana.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._fullkana">
            <summary>
              Mapping table of half-width Katakana.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper._accentkana">
            <summary>
              Mapping table for accents for the Japanese language.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.MinValue">
            <summary>
              Represents the smallest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="F:C1.Xaml.CharHelper.MaxValue">
            <summary>
              Represents the largest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="M:C1.Xaml.CharHelper.GetCharType(System.Char)">
            <summary>
              Retrieves the type of character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A CharType representing the type of character of c.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsCharOfType(System.Char,C1.Xaml.CharType)">
            <summary>
              Determines whether the specified character is of the
              specified type.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="type">A CharType type.</param>
            <returns>
              true if specified c and type matches the type of the
              character; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsMultiWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a multi-width character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a multi-width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsMultiWidth(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in a specified string is categorized as a multi-width 
              character. 
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a multi-width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsFullWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is a 
              full width character. Usually CJK characters are considers 
              as full widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a full width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsFullWidth(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a full width character. Usually 
              CJK characters are considers as full widths.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a full width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsOther(System.Char)">
            <summary>
              Indicates whether a Unicode character doesn't belong to
              any specific letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is doesn't a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsControl(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a control code.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a control code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsControl(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a control code.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a control 
              code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsKatakana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Katakana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsKatakana(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Katakana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Katakana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsHiragana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Hiragana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Hiragana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsHiragana(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Hiragana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Hiragana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Numeric character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsDigit(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Numeric digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsPunctuation(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Punctuation character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Punctuation character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsPunctuation(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Punctuation character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Punctuation 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsMathSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a mathematical symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a mathematical character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsMathSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a mathematical symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a mathematical 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Symbol character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Symbol character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Symbol 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsLower(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Lowercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Lowercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsLower(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Lowercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Lowercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsUpper(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Uppercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Uppercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsUpper(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Uppercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Uppercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsDigitOrSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric or a Math symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a numeric or symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsDigitOrSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Numeric or a Math symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              or a Math symbol; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsAlphabet(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsAlphabet(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a alphabet letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsAlphaOrDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter or digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsAlphaOrDigit(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a alphabet letter or digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsUpperKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a upper (capital) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana upper (capital) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsLowerKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a lower (normal) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana lower (normal) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.HasLowerKana(System.Char)">
            <summary>
              Determines whether the related kana has a related lower case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c has a related lower case kana; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsSpace(System.Char)">
            <summary>
              Determines whether the specified ch is space char.
            </summary>
            <param name="ch">
              The ch to be check
            </param>
            <returns>
              A <b>bool</b> value, <b>true</b> if the specified ch is space; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToFullWidth(System.Char)">
            <summary>
              Transforms the specified character to a full width character
              if possible. Ranges are Latin basic, Katakana and Hangul 
              characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              Full width character of c, otherwise original character
              returned.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToFullWidth(System.Boolean@,System.Char[])">
            <summary>
              Tansforms the specified character to a full width character
              if possible. This method differs from the other where it 
              takes on an array of characters. In FarEast country there 
              are times when multiple half width characters make a one
              full width character.
            </summary>
            <param name="c">An array of characters.</param>
            <param name="processedAll">
              When the soundex character is processed a <b>true</b> is 
              returned; otherwise, a <b>false</b> returned.
            </param>
            <returns>
              Full width character of c, otherwise the original character
              is returned.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToHalfWidth(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's half
              width equivalent. Ranges are Latin basic, Katakana and 
              Hangul characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The half width equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a half
                 width or not a multi-width character.
              </para>
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToHalfWidthEx(System.Char)">
            <summary>
              Transforms the specified character to a half width character
              if possible. This method differs from the ToHalfWidth method
              where it tries to return the accurate half width character - 
              which most likely happens in FarEast countries.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A character array representing c in half width form. In most
              cases this array will have only one element.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToKatakana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToKatakana(System.Char,System.Boolean)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent with an optional setting of
              full or half width. Special character handling for
              the Japanese language 
            </summary>
            <param name="c">
              A Unicode character.
            </param>
            <param name="fullWidth">
              <b>true</b> to return a full width Katakana, and 
              <b>false</b> to return a half width Katakana.
            </param>
            <returns></returns>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToHiragana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Hiragana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Hiragana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Hiragana or not Katakana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToAnsi(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An Ansi character equivalent of c in the current culture.
            </returns>
            <remarks>
              Encodes the specified Unicode character to an ANSI
              character using the current culture.
            </remarks>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent using the specified culture information.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Ansi character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToSJIS(System.Char)">
            <summary>
              Converts the value of a JIS (Japanese encoding) character
              to it's Shift-JIS equivalent.
            </summary>
            <param name="c">A JIS character.</param>
            <returns>
              <para>The Shift-JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a JIS character to it's equivalent Shift-JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToJIS(System.Char)">
            <summary>
              Converts the value of a Shift-JIS (Japanese encoding) 
              character to it's JIS equivalent.
            </summary>
            <param name="c">A Shift-JIS character.</param>
            <returns>
              <para>The JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a Shift-JIS character to it's equivalent JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToSJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Xaml.CharHelper.FromAnsi(System.Char)">
            <summary>
              Converts the value of an ANSI character to it's Unicode
              equivalent.
            </summary>
            <param name="c">An ANSI character.</param>
            <returns>
              A Unicode character equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.FromAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a ANSI character to it's Unicode
              equivalent using the specified culture information.
            </summary>
            <param name="c">An ANSI character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Unicode character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToUpperKana(System.Char)">
            <summary>
              Converts an lower (normal) case kana into a upper (capital) case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana upper case character.</returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.ToLowerKana(System.Char)">
            <summary>
              Converts an upper (capital) case kana into a lower case (normal).
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana lower case character.</returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.BelongTo(System.Char)">
            <summary>
              Retreives the Unicode character block the specified character
              belongs to. Current version supports a range from '\u000' 
              through '\uffff'.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A Unicode block the specified character belongs to.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.MultiWidthDetails(System.Char)">
            <summary>
              Returns further detail information of the character, since
              it lies in a range where it holds a fixture of different 
              character widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An CharType describing the type of the character, and also
              the width whether it's full or half.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.IsFarEastBlock(C1.Xaml.CharHelper.Blocks,System.Char)">
            <summary>
              Determines whether the specified block has to do with 
              CJK... ( only CJK have concepts of wide )
            </summary>
            <param name="block">A unicode char block.</param>
            <param name="c">
              A <see cref="T:System.Char"/> to process.
            </param>
            <returns>
              true if the block is related to CJK; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.innerToChar(System.Byte[])">
            <summary>
              Converts a byte array into a char type. (Internal usage)
            </summary>
            <param name="value">A byte array.</param>
            <returns>
              A character equivalent of value.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.innerToByte(System.Char)">
            <summary>
              Converts a single character into a byte array. (Internal usage)
            </summary>
            <param name="c">A character.</param>
            <returns>
              A byte array equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.GetFullHalfWidthSpecialChar(System.Char,System.Boolean)">
            <summary>
              Conversion between half and full width characters for Japanese
              special characters.
            </summary>
            <param name="c">A character.</param>
            <param name="toFull">
              <b>true</b> to convert to full width; otherwise, <b>false</b>.
            </param>
            <returns>
              The converted character. <see cref="F:System.Char.MinValue"/> means conversion
              didn't take place.
            </returns>
        </member>
        <member name="M:C1.Xaml.CharHelper.Convert(System.String,System.Int32)">
            <summary>
              Convert the character in the special index.
            </summary>
            <param name="text">
              The string to be checked.
            </param>
            <param name="index">
              The character index in the string.
            </param>
            <returns>
              The convert string.
            </returns>
        </member>
        <member name="T:C1.Xaml.C1ProjectThicknessConverter">
            <summary>
            Converter used to extract a specific member of a thickness structure.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1SideRadiusConverter">
            <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1SideThicknessConverter">
            <summary>
            Converter used to bind specific sides of inner elements thickness to 
            the main control thickness.
            </summary>
        </member>
        <member name="T:C1.Xaml.CustomConverter">
            <summary>
            Converter which receive a function to convert the value
            </summary>
        </member>
        <member name="M:C1.Xaml.CustomConverter.#ctor(System.Func{System.Object,System.Type,System.Object,System.String,System.Object},System.Func{System.Object,System.Type,System.Object,System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.CustomConverter"/> class.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
        </member>
        <member name="M:C1.Xaml.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.String,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.Xaml.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.String,System.Object},System.Func{System.Object,System.Type,System.Object,System.String,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.Xaml.CustomConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:C1.Xaml.CustomConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The language of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:C1.Xaml.VisibilityConverter">
            <summary>
            Converter from/to Visibility and Boolean.
            </summary>
            <remarks>
            true = Visible
            false = Collapsed
            </remarks>
        </member>
        <member name="M:C1.Xaml.VisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xaml.VisibilityConverter"/> class.
            </summary>
        </member>
        <member name="P:C1.Xaml.VisibilityConverter.Opposite">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Xaml.VisibilityConverter"/> is opposite.
            </summary>
            <value><c>true</c> if opposite; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Xaml.ZoomToScaleTransformConverter">
            <summary>
            Converts a double value to a <see cref="T:Windows.UI.Xaml.Media.ScaleTransform"/>.
            </summary>
        </member>
        <member name="P:C1.Xaml.DomUtil.SilverlightSize">
            <summary>
            Get the size of the Silverlight plug-in on the Html page.
            </summary>
        </member>
        <member name="T:C1.Xaml.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.Xaml.Extensions.FindParent``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Finds the first parent of a given type for a particular FrameworkElement
            </summary>
            <returns>
            <returns>The first object whose type is <typeparam name="T"/></returns>
            </returns>
        </member>
        <member name="M:C1.Xaml.Extensions.GetAllParents(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Returns all the parents in the visual tree
            </summary>
            <returns>The list of ancestor framework elements in the visual tree hierarchy</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.GetVisualStateGroup(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Gets the VisualStateGroup with the given name, looking up the visual tree
            </summary>
            <param name="root">Element to start from</param>
            <param name="groupName">Name of the group to look for</param>
            <returns>The group, if found, or null</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.GetParentsPopup(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Includes the argument (if not null)
            When it finds an open Popup that has a parent it traverses up through the parent, not adding the popup to the list
            </summary>
        </member>
        <member name="M:C1.Xaml.Extensions.RemoveFromParent(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Removes the element from its parent
            </summary>
        </member>
        <member name="M:C1.Xaml.Extensions.SetBinding``1(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
            <typeparam name="T">Type of the source</typeparam>
            <param name="target">The target.</param>
            <param name="dp">The dependency property which will be set.</param>
            <param name="source">The source.</param>
            <param name="expr">Expression that returns a property of the source object.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.SetBinding``1(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Windows.UI.Xaml.Data.IValueConverter)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
            <typeparam name="T">Type of the source</typeparam>
            <param name="target">The target.</param>
            <param name="dp">The dependency property which will be set.</param>
            <param name="source">The source.</param>
            <param name="expr">Expression that returns a property of the source object.</param>
            <param name="converter">The converter that will be applied to the created binding object.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.InvalidateVisualTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.InvalidateVisualTree(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.InvalidateVisualTreeArrange(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Invalidates the arrange of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.ScrollIntoView(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Changes the scroll offset of a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> so that an element becomes visible.
            </summary>
            <param name="sv"><see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> to scroll</param>
            <param name="elem"><see cref="T:Windows.UI.Xaml.FrameworkElement"/> to show</param>
        </member>
        <member name="M:C1.Xaml.Extensions.ScrollIntoView(Windows.UI.Xaml.Controls.ScrollViewer,Windows.Foundation.Rect)">
            <summary>
            Changes the scroll offset of a ScrollView so that a rectangle is visible.
            </summary>
            <param name="sv">ScrollViewer to scroll</param>
            <param name="r">Rectangle to show</param>
        </member>
        <member name="M:C1.Xaml.Extensions.MakeRelative(Windows.UI.Xaml.Controls.Primitives.Popup,Windows.UI.Xaml.FrameworkElement,System.Func{System.Collections.Generic.List{C1.Xaml.AnchorMatching}})">
            <summary>
            Makes the popup relative to another <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="popup"><see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/> to handle.</param>
            <param name="relativeElement">Element used to locate the popup.</param>
            <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.Xaml.AnchorMatching"/> defining the corners to bound of both elements.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.MakeRelative(Windows.UI.Xaml.Controls.Primitives.Popup,Windows.UI.Xaml.FrameworkElement,System.Func{System.Collections.Generic.List{C1.Xaml.AnchorMatching}},System.Func{Windows.Foundation.Point},System.Func{Windows.Foundation.Point})">
            <summary>
            Makes the popup relative to another <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <param name="popup"><see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/> to handle.</param>
            <param name="relativeElement">Element used to locate the popup.</param>
            <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.Xaml.AnchorMatching"/> defining the corners to bound of both elements.</param>
            <param name="getPosition">Function that retrieves the current position of the Popup.</param>
            <param name="getReferencePosition">Function that retrieves the current position of the reference element.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.ContainsFileAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Returns true if a file exists at a given path relative to the given folder.
            </summary>
            <param name="folder">Starting folder.</param>
            <param name="relativePath">Relative path.</param>
            <returns>True if file exists. False - otherwise.</returns>
            <remarks>
            NOTE: Even if the files with the given name only match the resource key - it will return true.
            I.e. if relative path points to Logo.png, but there is only Logo.scale-100.png - the method will still return true.
            </remarks>
        </member>
        <member name="M:C1.Xaml.Extensions.GetFileByPathAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Returns the StorageFile object for a file at a given path relative to the given folder.
            </summary>
            <param name="folder"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.CreateTempFileNameAsync(Windows.Storage.StorageFolder,System.String,System.String,System.String)">
            <summary>
            Creates a unique file name given the parameters.
            Note the theoretical race condition since
            the file name is only guaranteed to be unique at the point it is generated.
            </summary>
            <param name="folder"></param>
            <param name="extension"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.CreateTempFileAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Creates a temporary file.
            </summary>
            <param name="folder"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.DeleteFilesAsync(Windows.Storage.StorageFolder,System.Boolean)">
            <summary>
            Deletes all files from the given folder.
            </summary>
            <param name="folder"></param>
            <param name="ignoreExceptions">If true - all exceptions will be swallowed. Otherwise - they will be rethrown.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.ContainsFolderAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Returns true if a folder contains another folder with the given name
            </summary>
            <param name="folder"></param>
            <param name="name"></param>
            <returns>True if the folder contains the folder with given name. False - otherwise</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.EnsureFolderExistsAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Ensures that a folder with given name exists in given folder
            </summary>
            <param name="folder"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.C1TransformToVisual(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)">
            <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.
            </summary>
            <remarks>
            This is an improved version of <see cref="T:Windows.UI.Xaml.UIElement"/>.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/>s.
            </remarks>
            <param name="element">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the source coordinates.</param>
            <param name="visual">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the target coordinates.</param>
            <returns>A transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.Distance(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns the distance between the two points
            </summary>
            <param name="p1">One point.</param>
            <param name="p2">Another point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.Deflate(Windows.Foundation.Rect@,Windows.UI.Xaml.Thickness)">
            <summary>
            Deflates a <see cref="T:Windows.Foundation.Rect"/> structure by specified amount.
            </summary>
            <param name="r"><see cref="T:Windows.Foundation.Rect"/> structure.</param>
            <param name="th"><see cref="T:Windows.UI.Xaml.Thickness"/> structure defining amount to inflate this <see cref="T:Windows.Foundation.Rect"/>.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.Inflate(Windows.Foundation.Rect@,System.Double,System.Double)">
            <summary>
            Enlarges a <see cref="T:Windows.Foundation.Rect"/> structure by the specified amount.
            </summary>
            <param name="r"><see cref="T:Windows.Foundation.Rect"/> structure.</param>
            <param name="dx">The amount to inflate this <see cref="T:Windows.Foundation.Rect"/> horizontally.</param>
            <param name="dy">The amount to inflate this <see cref="T:Windows.Foundation.Rect"/> vertically.</param>
        </member>
        <member name="M:C1.Xaml.Extensions.IntersectsWith(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
            <param name="r">One rectangle to test.</param>
            <param name="rect">Another rectangle to test.</param>
            <returns>This method returns true if there is any intersection, otherwise false.</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.Contains(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Determines if the one rectangular region is entirely contained within another structure.
            </summary>
            <param name="r">One rectangle to test.</param>
            <param name="rect">Another rectangle.</param>
            <returns>This method returns true if the rectangular region represented by <paramref name="rect"/> is entirely contained within <paramref name="r"/> structure; otherwise false.</returns>
        </member>
        <member name="M:C1.Xaml.Extensions.ContainsAny``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Determines whether the specified list contains any of the following values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
            <returns>
            	<c>true</c> if the specified list contains any; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Xaml.Extensions.ToNotifyCollectionChanged``1(Windows.Foundation.Collections.IVectorChangedEventArgs,System.Collections.Generic.IList{``0})">
            <summary>
            Converts IVectorChangedEventArgs to NotifyCollectionChangedEventArgs.
            WARNING: the conversion is not accurate, because IVectorChangedEventArgs doesn't carry information about
            old items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vectorArgs"></param>
            <param name="changedList"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.ToSBCS(System.String)">
            <summary>
            Converts the string to SBCS string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.Extensions.ToDBCS(System.String)">
            <summary>
            Converts the string to DBCS string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.BindingEx.Execute``1(Windows.UI.Xaml.Data.Binding,System.Object)">
            <summary>
            Simulates the evaluation of a binding using reflection.
            </summary>
            <param name="binding">The binding.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.DateTimeEx.FromOADate(System.Double)">
            <summary>
            Returns a System.DateTime equivalent to the specified OLE Automation date.
            </summary>
            <param name="d">An OLE Automation date value.</param>
            <returns>An object that represents the same date and time as the d parameter.</returns>
        </member>
        <member name="M:C1.Xaml.DateTimeEx.ToOADate(System.DateTime)">
            <summary>
            Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <param name="date">The date that will be converted</param>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        </member>
        <member name="M:C1.Xaml.FrameworkElementEx.GetChildren``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Finds all the children of a given type for a particular FrameworkElement
            </summary>
        </member>
        <member name="M:C1.Xaml.FrameworkElementEx.GetChildren(Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            Finds all the children of a given <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:C1.Xaml.FrameworkElementEx._bindingMarker">
            <summary>
            Identifies our own bindings.
            </summary>
        </member>
        <member name="M:C1.Xaml.FrameworkElementEx.SetBinding(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,System.Object,System.String,Windows.UI.Xaml.Data.IValueConverter,System.Boolean)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
        </member>
        <member name="M:C1.Xaml.ObjectEx.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.Xaml.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0,Windows.UI.Xaml.Data.IValueConverter,System.Object,System.String)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
            <param name="converter">Converter to use when setting the property.</param>
            <param name="converterParameter">Parameter passed to the converter.</param>
            <param name="culture">Culture information to use when converting values.</param>
        </member>
        <member name="T:C1.Xaml.TypeEx">
            <summary>
            The <see cref="T:C1.Xaml.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.TypeEx.GetDefaultProperty(System.Type,System.Type)">
            <summary>
            Gets default property of the specified type.
            </summary>
            <param name="targetType">The type.</param>
            <param name="memberType">The member type to search for.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> instance if property has been found; Null otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.GetIndexedProperty(System.Type,System.String,System.Type)">
            <summary>
            Gets indexed property of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The property name to search for.</param>
            <param name="indexedType">The property type to search for.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> instance if property has been found; Null otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.Xaml.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="M:C1.Xaml.UIElementEx.C1TransformToVisual(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)">
            <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.
            </summary>
            <remarks>
            This is an improved version of <see cref="T:Windows.UI.Xaml.UIElement"/>.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/>s.
            </remarks>
            <param name="element">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the source coordinates.</param>
            <param name="visual">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the target coordinates.</param>
            <returns>A transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.</returns>
        </member>
        <member name="M:C1.Xaml.UIElementEx.C1GetRootVisual(Windows.UI.Xaml.UIElement)">
            <summary>
            [Platform safe] Gets the visual root of the current Application.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.KeyboardUtil">
            <summary>
            Keyboard utilities.
            </summary>
        </member>
        <member name="P:C1.Xaml.KeyboardUtil.Shift">
            <summary>
            Gets a value indicating whether shift key is pressed.
            </summary>
            <value><c>true</c> if shift key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Xaml.KeyboardUtil.Ctrl">
            <summary>
            Gets a value indicating whether ctrl key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Xaml.KeyboardUtil.Alt">
            <summary>
            Gets a value indicating whether alt key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Xaml.KeyboardUtil.Command">
            <summary>
            Returns whether ctrl or apple key are pressed.
            </summary>
            <remarks>
            Useful for handling shortcuts in Windows and Mac.
            </remarks>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.C1LoadXaml``1(System.String)">
            <summary>
            [Platform safe] Parses a well-formed XAML fragment and creates a corresponding Silverlight
            object tree, and returns the root of the object tree.
            </summary>
            <typeparam name="T">The type of the object to be parsed.</typeparam>
            <param name="strXaml">String that contains a valid XAML fragment.</param>
            <returns>The root object of the parsed Silverlight object tree.</returns>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.IsInVisualTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            [Platform safe] Determines whether the specified element is in visual tree.
            </summary>
            <param name="elem">The framework element.</param>
            <returns>
            	<c>true</c> if the specified element is in visual tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.C1BeginInvoke(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            [Platform safe] Invokes the begin invoke accessing the Dispatcher of the framework element.
            </summary>
            <param name="elem">The elem.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.C1GetLogicalFocusedElement(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            [Platform safe] Returns a logical focused element from a focus scope where the specified
            <paramref name="relativeToElement"/> is in.
            </summary>
            <param name="relativeToElement"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.GetKeyboardFocusedElement">
            <summary>
            [Platform safe] Returns an element with a keyboard focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.C1GetPlatformKeyCode(Windows.UI.Core.KeyEventArgs)">
            <summary>
            [Platform safe] Gets platform key code from a KeyEventArgs.
            </summary>
            <param name="e">The <see cref="!:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.AdjustContentControlTemplate(Windows.UI.Xaml.Controls.ControlTemplate)">
            <summary>
            [Platform safe] Adjusts, if possible, a ControlTemplate intended for the 
            ContentControl.Template property to make it functional in WPF, and returns a passed template
            reference. Do nothing in Silverlight, just returns a passed template.
            </summary>
            <param name="template"></param>
            <returns></returns>
            <remarks>
            This method resolves the following WPF specific problem: if a ControlTemplate assigned to the
            ContentControl.Template property has a not assigned TargetType property then a ContentPresenter
            element used in the template becomes non-functional. As a result an assignment of some UI to
            the ContentControl.Content property has no effect.
            <para>
            This method checks the ControlTemplate.TargetType property and assign it with ContentControl
            type if the property is not assigned yet.
            </para>
            <para>
            Note that this method works only if the template is not sealed yet, which usually means that it
            has not been applied somewhere at the moment. If the template is sealed then this method does 
            nothing.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Xaml.PlatformIndependent.IsInDesignMode(Windows.UI.Xaml.DependencyObject)">
            <summary>
            [Platform safe] Gets an indication whether the specified object lives in a design-time environment.
            </summary>
            <param name="obj">
            Object to check.
            </param>
            <returns>
            True if object is in design-time mode; otherwise, false.
            </returns>
        </member>
        <member name="P:C1.Xaml.PlatformIndependent.IsWindowsPhoneDevice">
            <summary>
            Indicates whether the running device is windows phone device.
            </summary>
        </member>
        <member name="T:C1.Xaml.PropertyChangedEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
        </member>
        <member name="P:C1.Xaml.PropertyChangedEventArgs`1.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="P:C1.Xaml.PropertyChangedEventArgs`1.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="T:C1.Xaml.PropertyChangingEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanging events.
            </summary>
        </member>
        <member name="P:C1.Xaml.PropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Xaml.PropertyChangingEventArgs`1"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:C1.Xaml.Ranking.OnAdded(System.Int32,System.Int32,System.Int32)">
            <summary>
            Silverlight first inserts all n elements in ItemsControl.Items and then calls OnItemsChanged n times with Action=Add.
            This is a problem because rankFromIndex may return -1 for existing items.
            So we add all items on the first add and then ignore the following.
            </summary>
        </member>
        <member name="T:C1.Xaml.ResourceLoader">
            <summary>
            Contains a helper method for downloading a file from a web uri.
            </summary>
        </member>
        <member name="M:C1.Xaml.ResourceLoader.GetResourceAsync(System.Uri)">
            <summary>
            Used to retrieve a StorageFile that uses qualifiers in the naming convention.
            </summary>
            <param name="uri">The specified uri.</param>
            <returns>
            Returns a StorageFile that uses qualifiers in the naing convention.
            </returns>
        </member>
        <member name="M:C1.Xaml.ResourceLoader.GetLocalResourceAsync(System.String)">
            <summary>
            Used to retrieve a StorageFile that uses qualifiers in the naming convention.
            </summary>
            <param name="relativePath">The relative path specifies the resource.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xaml.ResourceLoader.GetWebResourceAsync(System.Uri,Windows.Storage.StorageFolder,System.String)">
            <summary>
            Downloads a file from the specified address and returns the file.
            </summary>
            <param name="fileUri">The URI of the file.</param>
            <param name="folder">The folder to save the file to.</param>
            <param name="fileName">The file name to save the file as.</param>
            <param name="option">
            A value that indicates what to do
            if the filename already exists in the current folder.
            </param>
            <remarks>
            If no file name is given - the method will try to find
            the suggested file name in the HTTP response
            based on the Content-Disposition HTTP header.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:C1.Xaml.SourcedEventArgs">
            <summary>
            Contains data for events with a source different from the object firing the event.
            </summary>
        </member>
        <member name="P:C1.Xaml.SourcedEventArgs.Source">
            <summary>
            Gets or sets the source of the event.
            </summary>
        </member>
        <member name="M:C1.Xaml.VisualStateHelper.GoToState(Windows.UI.Xaml.Controls.Control,System.String,System.Boolean)">
            <summary>
            Tries to go to a new state and throws a friendly error message
            </summary>
            <param name="control">Control that is going to change the state.</param>
            <param name="stateName">Name of the state.</param>
            <param name="useTransitions">Use transitions or not.</param>
        </member>
        <member name="T:C1.Xaml.VTreeHelper">
            <summary>
            The <see cref="T:C1.Xaml.VTreeHelper"/> class provides utility methods that perform common tasks involving nodes in a visual tree.
            </summary>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetChildOfType(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Returns the first child visual object of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:Windows.UI.Xaml.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <returns>The visual object of the specified type.</returns>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetChildrenOfType(Windows.UI.Xaml.DependencyObject,System.Type,System.Collections.Generic.IList{Windows.UI.Xaml.DependencyObject}@)">
            <summary>
            Returns all children visual objects of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:Windows.UI.Xaml.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> object to fill with found objects.</param>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetParentOfType(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Returns a <see cref="T:Windows.UI.Xaml.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetParentOfType(Windows.UI.Xaml.DependencyObject,System.Type,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns a <see cref="T:Windows.UI.Xaml.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetParentOfType(Windows.UI.Xaml.DependencyObject,System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:Windows.UI.Xaml.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetParentOfType(Windows.UI.Xaml.DependencyObject,System.Type,Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Returns a <see cref="T:Windows.UI.Xaml.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Xaml.VTreeHelper.GetFirstParent(Windows.UI.Xaml.DependencyObject,System.Collections.Generic.IList{System.Type},Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns a <see cref="T:Windows.UI.Xaml.DependencyObject"/> value that represents the first parent 
            of the visual object which type is one of the specified tyles. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="types">The <see cref="T:System.Collections.Generic.IList`1"/> list of types to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="T:C1.Xaml.MessageBoxResult">
            <summary>
            Represents a user's response to a message box.
            </summary>
        </member>
        <member name="F:C1.Xaml.MessageBoxResult.None">
            <summary>
            No result.
            </summary>
        </member>
        <member name="F:C1.Xaml.MessageBoxResult.OK">
            <summary>
            The user clicked the OK button.
            </summary>
        </member>
        <member name="F:C1.Xaml.MessageBoxResult.Cancel">
            <summary>
            The user clicked the Cancel button or pressed ESC.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1FullscreenDialog">
            <summary>
            Shows content as a fullscreen modal dialog.
            </summary>	
            <remarks>This control doesn't contain any visual UI such as window header or buttons. If it is required, it should be implemented in the content.</remarks>
        </member>
        <member name="E:C1.Xaml.C1FullscreenDialog.Closed">
            <summary>
            Event fired when the window is closed by the user or the <see cref="M:C1.Xaml.C1FullscreenDialog.Close"/> method.
            </summary>
        </member>
        <member name="E:C1.Xaml.C1FullscreenDialog.Closing">
            <summary>
            Event fired when the window is about to close, allows the handler to stop the window from being closed.
            </summary>
        </member>
        <member name="P:C1.Xaml.C1FullscreenDialog.DialogResult">
            <summary>
            Gets or sets the dialog result for the window.
            </summary>
            <remarks>
            Setting this property to a value other than "None" automatically closes the window. 
            </remarks>
        </member>
        <member name="F:C1.Xaml.C1FullscreenDialog.DialogResultProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1FullscreenDialog.DialogResult"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Xaml.C1FullscreenDialog.HideStatusBarWhenOpen">
            <summary>
            Gets or sets a value indicating whether the status bar must be hidden when the popup is open.
            </summary>
        </member>
        <member name="F:C1.Xaml.C1FullscreenDialog.HideStatusBarWhenOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Xaml.C1FullscreenDialog.HideStatusBarWhenOpen"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Xaml.C1FullscreenDialog.#ctor">
            <summary>
            Initializes a new instance of a <see cref="!:C1Window"/>.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1FullscreenDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1FullscreenDialog.Show">
            <summary>
            Opens the window as modal.
            </summary>
        </member>
        <member name="T:C1.Xaml.CursorExtensions">
            <summary>
            Gets or sets the pointer over cursor for element.
            </summary>
        </member>
        <member name="F:C1.Xaml.CursorExtensions.CursorProperty">
            <summary>
            Cursor Attached Dependency Property
            </summary>
        </member>
        <member name="M:C1.Xaml.CursorExtensions.GetCursor(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the Cursor property. This dependency property 
            indicates the cursor to use when a mouse cursor is moved over the control.
            </summary>
        </member>
        <member name="M:C1.Xaml.CursorExtensions.SetCursor(Windows.UI.Xaml.DependencyObject,Windows.UI.Core.CoreCursor)">
            <summary>
            Sets the Cursor property. This dependency property 
            indicates the cursor to use when a mouse cursor is moved over the control.
            </summary>
        </member>
        <member name="M:C1.Xaml.CursorExtensions.OnCursorChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Cursor property.
            </summary>
            <param name="d">
            The <see cref="T:Windows.UI.Xaml.DependencyObject"/> on which
            the property has changed value.
            </param>
            <param name="e">
            Event data that is issued by any event that
            tracks changes to the effective value of this property.
            </param>
        </member>
        <member name="F:C1.Xaml.CursorExtensions.CursorHelperProperty">
            <summary>
            CursorDisplayHandler Attached Dependency Property
            </summary>
        </member>
        <member name="M:C1.Xaml.CursorExtensions.GetCursorHelper(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the CursorHelper property. This dependency property 
            indicates the helper for displaying the Cursor when a pointer is moved over the control.
            </summary>
        </member>
        <member name="M:C1.Xaml.CursorExtensions.SetCursorHelper(Windows.UI.Xaml.DependencyObject,C1.Xaml.C1CursorHelper)">
            <summary>
            Sets the CursorHelper property. This dependency property 
            indicates the handler for displaying the Cursor when a pointer is moved over the control.
            </summary>
        </member>
        <member name="T:C1.Xaml.C1CursorHelper">
            <summary>
            Handles the Cursor attached behavior defined by the attached property
            of the <see cref="T:C1.Xaml.CursorExtensions"/> class.
            </summary>
        </member>
        <member name="M:C1.Xaml.C1CursorHelper.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches to the specified framework element.
            </summary>
            <param name="frameworkElement">The frameworkElement.</param>
        </member>
        <member name="M:C1.Xaml.C1CursorHelper.Detach">
            <summary>
            Detaches this instance.
            </summary>
        </member>
        <member name="T:C1.Xaml.MetadataWorkaround">
            <summary>
            An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="M:C1.Xaml.MetadataWorkaround.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            Invoked when this page is about to be displayed in a Frame.
            </summary>
            <param name="e">Event data that describes how this page was reached.  The Parameter
            property is typically used to configure the page.</param>
        </member>
        <member name="M:C1.Xaml.MetadataWorkaround.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:C1.Xaml.MetadataWorkaround.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:C1.Xaml.C1_UWP_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:C1.Xaml.C1_UWP_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:C1.Xaml.C1_UWP_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:C1.Silverlight.Resources.Common`1">
            <summary>
            A helper base for resource strongly-typed resource class
            that reads resources from the application assembly.
            </summary>
            <typeparam name="R">The strongly-typed resource subclass</typeparam>
        </member>
        <member name="T:C1.Silverlight.Resources.Common`1.S">
            <summary>
            Dummy class to make GetString work.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String)">
            <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,Windows.ApplicationModel.Resources.Core.ResourceContext)">
            <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.Common`1.ResourceManager">
            <summary>
            Loads resource managers for the application and the assembly.
            </summary>
        </member>
        <member name="F:Public.RunTimeNameSuffix">
            <summary>
            Defines the WPF platform specific suffix of a run-time assembly name.
            </summary>
        </member>
        <member name="F:Public.DesignTimeNet4NameSuffix">
            <summary>
            Defines the WPF platform specific suffix of a VS2010/Blend3-4 design-time assembly name.
            </summary>
        </member>
    </members>
</doc>
